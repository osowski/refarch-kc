(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"Yg8/":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return m}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),i=n("013z");n("qKvR");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={},s=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},c=s("InlineNotification"),p=s("PageDescription"),l={_frontmatter:o},b=i.a;function m(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(b,r({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(c,{kind:"warning",mdxType:"InlineNotification"},Object(a.b)("strong",null,"TODO")," - WORK IN PROGRESS"),Object(a.b)(p,{mdxType:"PageDescription"},"The implemented DevOps pipelines for the Reefer Container Shipment solution reference implementation of the Event-Driven Reference Architecture. This chapter focuses on the ",Object(a.b)("strong",null,"GitOps")," capability implemented in the reference implementation."),Object(a.b)("h1",null,"Overview"),Object(a.b)("p",null,"Our ",Object(a.b)("a",r({parentName:"p"},{href:"/refarch-kc/infrastructure/devops-continuous-integration/"}),"Continuous Integration (CI) approach")," is one of “zero-infrastructure overhead”. To accomplish this goal, we utilize ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/features/actions"}),"GitHub Actions")," to build and push a microservice’s associated container images to ",Object(a.b)("a",r({parentName:"p"},{href:"https://hub.docker.com/u/ibmcase"}),"Docker Hub")," for public consumption. The GitHub Actions workflows are defined in the owning repository’s ",Object(a.b)("inlineCode",{parentName:"p"},".github/workflows/dockerbuild.yaml")," file."),Object(a.b)("p",null,"Our ",Object(a.b)("a",r({parentName:"p"},{href:"#gitops"}),"GitOps approach"),", ",Object(a.b)("em",{parentName:"p"},"the topic of this chapter"),", focuses on a single-repository, environment-per-subdirectory model which can be forked and cloned to replicate deployments to other clusters and environments. The reference implementation utilizes ",Object(a.b)("a",r({parentName:"p"},{href:"https://kustomize.io/"}),"Kustomize")," as its templating technology to utilize the ",Object(a.b)("inlineCode",{parentName:"p"},"app-deploy.yaml")," files, provided by each individual microservice, as a base and then layer in environment-specific configuration and credentials as needed."),Object(a.b)("p",null,"Our ",Object(a.b)("a",r({parentName:"p"},{href:"/refarch-kc/infrastructure/devops-continuous-delivery/"}),"Continuous Delivery (CD) approach")," focuses on a GitOps-based delivery model, using a GitHub repository as a single source of truth for the deployment, management, and operations of our running application components. In this model, we have the flexibility to use multiple open-source technologies to apply the single source of truth from a given GitHub repository onto a desired cluster environment."),Object(a.b)("h1",null,"GitOps"),Object(a.b)("p",null,"If you are unfamiliar with GitOps as a practice, additional details around the background of GitOps and how it differs from traditional deployment models can be found in ",Object(a.b)("a",r({parentName:"p"},{href:"https://www.weave.works/technologies/gitops/"}),"this blog post")," from WeaveWorks."),Object(a.b)("h2",null,"Environment overview"),Object(a.b)("p",null,"The GitOps environments are defined in the ",Object(a.b)("inlineCode",{parentName:"p"},"environments")," sub-directory, allowing for multiple environments (phases, stages, teams, etc) to be deployed from a single GitHub repository. This is a streamlined implementation from our previous environment-per-branch approach as it is a bit simpler to maintain for our team. Your team may have success with either structure."),Object(a.b)("p",null,"Each environment has the following default directory structure:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"environments\n├── dev\n│   ├── apps\n│   │   └── refarch-kc\n│   │       ├── base\n│   │       │   └── kustomization.yaml\n│   │       ├── kustomization.yaml\n│   │       └── overlays\n│   │           └── kustomization.yaml\n│   ├── env\n│   │   ├── base\n│   │   │   └── kustomization.yaml\n│   │   ├── kustomization.yaml\n│   │   └── overlays\n│   │       └── kustomization.yaml\n│   ├── infrastructure\n│   │   └── kustomization.yaml\n│   ├── kustomization.yaml\n│   └── services\n│       ├── fleetms\n│       │   ├── base\n│       │   │   ├── config\n│       │   │   │   ├── app-deploy.yaml\n│       │   │   │   └── kustomization.yaml\n│       │   │   └── kustomization.yaml\n│       │   ├── kustomization.yaml\n│       │   └── overlays\n│       │       ├── kustomization.yaml\n...\n│       └── voyagesms\n│           ├── base\n│           │   ├── config\n│           │   │   ├── app-deploy.yaml\n│           │   │   └── kustomization.yaml\n│           │   └── kustomization.yaml\n│           ├── kustomization.yaml\n│           └── overlays\n│               └── kustomization.yaml\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"apps/refarch-kc")," subdirectory\nThis subdirectory aggregates together all the microservices that comprise the ",Object(a.b)("inlineCode",{parentName:"p"},"refarch-kc")," reference implementation. It also applies the common label of ",Object(a.b)("inlineCode",{parentName:"p"},"app.kubernetes.io/part-of: refarch-kc")," to all the deployed components for easier management."),Object(a.b)("p",{parentName:"li"},"In the ",Object(a.b)("inlineCode",{parentName:"p"},"dev")," environment, this subdirectory also contains the ",Object(a.b)("inlineCode",{parentName:"p"},"KafkaTopics")," CRDs to automatically create the required Kafka Topics inside the Kafka cluster (as the ",Object(a.b)("inlineCode",{parentName:"p"},"dev")," environments utilizes the Strimzi Operator for cluster management).")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"env")," subdirectory\nThis subdirectory provides all the necessary ServiceAccount, ConfigsMap and Secret configuration. Depending upon your environment, most of your customization of a new environment will be done in this subdirectory.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"infrastructure")," subdirectory\nThis optional subdirectory provides the ability to create a Kubernetes Namespace / OpenShift Project and any necessary backing services ahead of application microservice deployment. This is only used in the ",Object(a.b)("inlineCode",{parentName:"p"},"dev")," environment, as a way to demonstrate the ability to create a fully-managed environment from scratch."),Object(a.b)(c,{kind:"warning",mdxType:"InlineNotification"},"When you create your environment via `kubectl apply -k environments/dev` with a Namespace definition in the `infrastructure` subdirectory, running `kubectl delete -k environments/dev` will delete the namespace!")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"services")," subdirectory\nThis subdirectory provides all the necessary deployment configurations for the ",Object(a.b)("inlineCode",{parentName:"p"},"AppsodyApplication")," and ",Object(a.b)("inlineCode",{parentName:"p"},"OpenLiberty")," applications that make up the reference implementation. The ",Object(a.b)("inlineCode",{parentName:"p"},"/base/config/app-deploy.yaml")," file in each ",Object(a.b)("inlineCode",{parentName:"p"},"services")," subdirectory is automatically maintained by our ",Object(a.b)("a",r({parentName:"p"},{href:"/refarch-kc/infrastructure/devops-gitops/"}),"GitOps")," pipelines."),Object(a.b)("p",{parentName:"li"},"The main area of customization for individual environments will be done in each service’s ",Object(a.b)("inlineCode",{parentName:"p"},"overlays")," subdirectory, as this subdirectory provides the ability to modify and update the base ",Object(a.b)("inlineCode",{parentName:"p"},"app-deploy.yaml")," file at deploy time."))),Object(a.b)("h2",null,"Service overview"),Object(a.b)("p",null,"TBD"),Object(a.b)("p",null,"In this section, we will walk through the Fleet microservice’s ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore/services/fleetms/overlays"}),Object(a.b)("inlineCode",{parentName:"a"},"/overlays")," subdirectory ")," to describe what operations can be performed on the base ",Object(a.b)("inlineCode",{parentName:"p"},"app-deploy.yaml")," through the Kustomize framework."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Adding Kafka credentials"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Adding Kafka certificates")))),Object(a.b)("h2",null,"Reference Implementation environments"),Object(a.b)("p",null,"We have provided a few sample environments to get started."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/dev"}),Object(a.b)("strong",{parentName:"a"},Object(a.b)("inlineCode",{parentName:"strong"},"dev"))," environment"),": This environment is deployable to any Kubernetes or OCP cluster and provides its own dedicated backing services.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-credentials"}),Object(a.b)("strong",{parentName:"a"},Object(a.b)("inlineCode",{parentName:"strong"},"example-credentials"))," environment"),": This example configures the microservices to connect to a Postgres database with SSL verification enabled and to Event Streams using an API key - utilizing both of these backing services through off-cluster service providers.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore"}),Object(a.b)("strong",{parentName:"a"},Object(a.b)("inlineCode",{parentName:"strong"},"example-es-truststore"))," environment"),": This example configures the microservices to connect to a Postgres database and to Event Streams using an API key, with both services having SSL verification enabled. The Event Streams certificate is provided as a Java truststore to the Java-based microservices and a PEM file to the non-Java-based microservices.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/eda-integration-2020.08"}),Object(a.b)("strong",{parentName:"a"},Object(a.b)("inlineCode",{parentName:"strong"},"eda-integration-XXXX.YY"))," environment"),": This environment is our squad’s integration environment for a fully-automated end-to-end build pipeline, with the target environment being a ",Object(a.b)("a",r({parentName:"p"},{href:"https://cloud.ibm.com/kubernetes/catalog/create?platformType=openshift"}),"Red Hat OpenShift Container Platform cluster running on IBM Cloud"),"."))),Object(a.b)("h2",null,"Creating a new environment"),Object(a.b)("p",null,"TBD"),Object(a.b)("p",null,"To create a new environment, you will want to use one of the environments described above as a template and refine it as needed."),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Fork this repository."),Object(a.b)("li",{parentName:"ol"},"Copy the desired environment to a new subdirectory in the ",Object(a.b)("inlineCode",{parentName:"li"},"/environments")," directory."),Object(a.b)("li",{parentName:"ol"},"???"),Object(a.b)("li",{parentName:"ol"},"Profit")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Warnings, Gotchas, and Things You Should Care About:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Namespace ???")),Object(a.b)("h1",null,"Next steps"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"For details on how the Continuous Delivery implementation leverages the GitOps artifacts,")," reference the peer ",Object(a.b)("a",r({parentName:"p"},{href:"/refarch-kc/infrastructure/devops-continuous-delivery/"}),"Continuous Delivery (CD)")," chapter of this manual."))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-infrastructure-devops-gitops-index-mdx-5977594f43097e41c5b2.js.map