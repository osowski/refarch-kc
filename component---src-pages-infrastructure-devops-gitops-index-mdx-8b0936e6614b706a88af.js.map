{"version":3,"sources":["webpack:///./src/pages/infrastructure/devops-gitops/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","small","kind","isMDXComponent"],"mappings":"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","file":"component---src-pages-infrastructure-devops-gitops-index-mdx-8b0936e6614b706a88af.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-kc/refarch-kc/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\nThe implemented DevOps pipelines for the Reefer Container Shipment solution reference implementation of the Event-Driven Reference Architecture. This chapter focuses on the <strong>GitOps</strong> capability implemented in the reference implementation.\n    </PageDescription>\n    <h1>{`Overview`}</h1>\n    <p>{`Our `}<a parentName=\"p\" {...{\n        \"href\": \"/refarch-kc/infrastructure/devops-continuous-integration/\"\n      }}>{`Continuous Integration (CI) approach`}</a>{` is one of “zero-infrastructure overhead”. To accomplish this goal, we utilize `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/features/actions\"\n      }}>{`GitHub Actions`}</a>{` to build and push a microservice’s associated container images to `}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.docker.com/u/ibmcase\"\n      }}>{`Docker Hub`}</a>{` for public consumption. The GitHub Actions workflows are defined in the owning repository’s `}<inlineCode parentName=\"p\">{`.github/workflows/dockerbuild.yaml`}</inlineCode>{` file.`}</p>\n    <p>{`Our `}<a parentName=\"p\" {...{\n        \"href\": \"#gitops\"\n      }}>{`GitOps approach`}</a>{`, `}<em parentName=\"p\">{`the topic of this chapter`}</em>{`, focuses on a single-repository, environment-per-subdirectory model which can be forked and cloned to replicate deployments to other clusters and environments. The reference implementation utilizes `}<a parentName=\"p\" {...{\n        \"href\": \"https://kustomize.io/\"\n      }}>{`Kustomize`}</a>{` as its templating technology to utilize the `}<inlineCode parentName=\"p\">{`app-deploy.yaml`}</inlineCode>{` files, provided by each individual microservice, as a base and then layer in environment-specific configuration and credentials as needed.`}</p>\n    <p>{`Our `}<a parentName=\"p\" {...{\n        \"href\": \"/refarch-kc/infrastructure/devops-continuous-delivery/\"\n      }}>{`Continuous Delivery (CD) approach`}</a>{` focuses on a GitOps-based delivery model, using a GitHub repository as a single source of truth for the deployment, management, and operations of our running application components. In this model, we have the flexibility to use multiple open-source technologies to apply the single source of truth from a given GitHub repository onto a desired cluster environment.`}</p>\n    <h1>{`GitOps`}</h1>\n    <p>{`If you are unfamiliar with GitOps as a practice, additional details around the background of GitOps and how it differs from traditional deployment models can be found in `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.weave.works/technologies/gitops/\"\n      }}>{`this blog post`}</a>{` from WeaveWorks.`}</p>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Reference Implementation environments</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Environment overview</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Service overview</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Creating a new environment</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Reference Implementation environments`}</h2>\n    <p>{`We have provided a few sample environments to get started.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/dev\"\n          }}><strong parentName=\"a\"><inlineCode parentName=\"strong\">{`dev`}</inlineCode></strong>{` environment`}</a>{`: This environment is deployable to any Kubernetes or OCP cluster and provides its own dedicated backing services.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-credentials\"\n          }}><strong parentName=\"a\"><inlineCode parentName=\"strong\">{`example-credentials`}</inlineCode></strong>{` environment`}</a>{`: This example configures the microservices to connect to a Postgres database with SSL verification enabled and to Event Streams using an API key - utilizing both of these backing services through off-cluster service providers.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore\"\n          }}><strong parentName=\"a\"><inlineCode parentName=\"strong\">{`example-es-truststore`}</inlineCode></strong>{` environment`}</a>{`: This example configures the microservices to connect to a Postgres database and to Event Streams using an API key, with both services having SSL verification enabled. The Event Streams certificate is provided as a Java truststore to the Java-based microservices and a PEM file to the non-Java-based microservices.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/eda-integration-2020.08\"\n          }}><strong parentName=\"a\"><inlineCode parentName=\"strong\">{`eda-integration-XXXX.YY`}</inlineCode></strong>{` environment`}</a>{`: This environment is our squad’s integration environment for a fully-automated end-to-end build pipeline, with the target environment being a `}<a parentName=\"p\" {...{\n            \"href\": \"https://cloud.ibm.com/kubernetes/catalog/create?platformType=openshift\"\n          }}>{`Red Hat OpenShift Container Platform cluster running on IBM Cloud`}</a>{`.`}</p>\n      </li>\n    </ul>\n    <h2>{`Environment overview`}</h2>\n    <p>{`The GitOps environments are defined in the `}<inlineCode parentName=\"p\">{`environments`}</inlineCode>{` sub-directory, allowing for multiple environments (phases, stages, teams, etc) to be deployed from a single GitHub repository. This is a streamlined implementation from our previous environment-per-branch approach as it is a bit simpler to maintain for our team. Your team may have success with either structure.`}</p>\n    <p>{`Each environment has the following default directory structure:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`environments\n├── dev\n│   ├── apps\n│   │   └── refarch-kc\n│   │       ├── base\n│   │       │   └── kustomization.yaml\n│   │       ├── kustomization.yaml\n│   │       └── overlays\n│   │           └── kustomization.yaml\n│   ├── env\n│   │   ├── base\n│   │   │   └── kustomization.yaml\n│   │   ├── kustomization.yaml\n│   │   └── overlays\n│   │       └── kustomization.yaml\n│   ├── infrastructure\n│   │   └── kustomization.yaml\n│   ├── kustomization.yaml\n│   └── services\n│       ├── fleetms\n│       │   ├── base\n│       │   │   ├── config\n│       │   │   │   ├── app-deploy.yaml\n│       │   │   │   └── kustomization.yaml\n│       │   │   └── kustomization.yaml\n│       │   ├── kustomization.yaml\n│       │   └── overlays\n│       │       ├── kustomization.yaml\n...\n│       └── voyagesms\n│           ├── base\n│           │   ├── config\n│           │   │   ├── app-deploy.yaml\n│           │   │   └── kustomization.yaml\n│           │   └── kustomization.yaml\n│           ├── kustomization.yaml\n│           └── overlays\n│               └── kustomization.yaml\n`}</code></pre>\n    <hr></hr>\n    <h3>{`The `}<strong parentName=\"h3\">{`apps/refarch-kc`}</strong>{` subdirectory`}</h3>\n    <p>{`  This subdirectory aggregates together all the microservices that comprise the `}<inlineCode parentName=\"p\">{`refarch-kc`}</inlineCode>{` reference implementation. It also applies the common label of `}<inlineCode parentName=\"p\">{`app.kubernetes.io/part-of: refarch-kc`}</inlineCode>{` to all the deployed components for easier management.`}</p>\n    <p>{`  In the `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` environment, this subdirectory also contains the `}<inlineCode parentName=\"p\">{`KafkaTopics`}</inlineCode>{` CRDs to automatically create the required Kafka Topics inside the Kafka cluster (as the `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` environments utilizes the Strimzi Operator for cluster management).`}</p>\n    <hr></hr>\n    <h3>{`The `}<strong parentName=\"h3\">{`env`}</strong>{` subdirectory`}</h3>\n    <p>{`  This subdirectory provides all the necessary ServiceAccount, ConfigsMap and Secret configuration. Depending upon your environment, most of your customization of a new environment will be done in this subdirectory.`}</p>\n    <hr></hr>\n    <h3>{`The `}<strong parentName=\"h3\">{`infrastructure`}</strong>{` subdirectory`}</h3>\n    <p>{`  This optional subdirectory provides the ability to create a Kubernetes Namespace / OpenShift Project and any necessary backing services ahead of application microservice deployment. This is only used in the `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` environment, as a way to demonstrate the ability to create a fully-managed environment from scratch.`}</p>\n  <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">When you create your environment via <code>kubectl apply -k environments/dev</code> with a <strong>Namespace</strong> definition in the <em>infrastructure</em> subdirectory, running <code>kubectl delete -k environments/dev</code> will delete the Namespace!</InlineNotification>\n    <hr></hr>\n    <h3>{`The `}<strong parentName=\"h3\">{`services`}</strong>{` subdirectory`}</h3>\n    <p>{`  This subdirectory provides all the necessary deployment configurations for the `}<inlineCode parentName=\"p\">{`AppsodyApplication`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`OpenLiberty`}</inlineCode>{` applications that make up the reference implementation. The `}<inlineCode parentName=\"p\">{`/base/config/app-deploy.yaml`}</inlineCode>{` file in each `}<inlineCode parentName=\"p\">{`services`}</inlineCode>{` subdirectory is automatically maintained by our `}<a parentName=\"p\" {...{\n        \"href\": \"/refarch-kc/infrastructure/devops-gitops/\"\n      }}>{`GitOps`}</a>{` pipelines.`}</p>\n    <p>{`  The main area of customization for individual environments will be done in each service’s `}<inlineCode parentName=\"p\">{`overlays`}</inlineCode>{` subdirectory, as this subdirectory provides the ability to modify and update the base `}<inlineCode parentName=\"p\">{`app-deploy.yaml`}</inlineCode>{` file at deploy time.`}</p>\n    <hr></hr>\n    <h2>{`Service overview`}</h2>\n    <p>{`In this section, we will walk through the Fleet microservice’s `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore/services/fleetms/overlays\"\n      }}><inlineCode parentName=\"a\">{`/overlays`}</inlineCode>{` subdirectory `}</a>{` to describe what operations can be performed on the base `}<inlineCode parentName=\"p\">{`app-deploy.yaml`}</inlineCode>{` through the Kustomize framework.`}</p>\n    <h3>{`Adding Kafka credentials`}</h3>\n    <p>{`The majority of our Kafka-based microservices look for configuration and credential information defined as environment variables upon startup. This makes it easy to configure, update, and manage running application instances when configuration and credential information changes.`}</p>\n    <p>{`To add the necessary credential information to a given microservice at deploy time, we use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-env-patch.yaml\"\n      }}>{`/services/fleetms/overlays/appsody-env-patch.yaml`}</a>{` overlay to append `}<inlineCode parentName=\"p\">{`KAFKA_USER`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`KAFKA_PASSWORD`}</inlineCode>{` environment variables to list of environment variables already defined in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/base/config/app-deploy.yaml\"\n      }}>{`base `}<inlineCode parentName=\"a\">{`app-deploy.yaml`}</inlineCode>{` file`}</a>{`.`}</p>\n    <h3>{`Adding Kafka certificates`}</h3>\n    <p>{`To add the required SSL/TLS certificates necessary for connecting to secured Apache Kafka / IBM Event Streams systems, you must inject the certificate file dynamically at deploy time. This process can be completed in three steps:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a Kubernetes Secret containing the Certificate file`}</li>\n      <li parentName=\"ol\">{`Create a Kubernetes Volume in the Kubernetes Deployment, AppsodyApplication, or OpenLibertyApplication specification, based on the Secret`}</li>\n      <li parentName=\"ol\">{`Create a Kubernetes VolumeMount in the Kubernetes Deployment, AppsodyApplication, or OpenLibertyApplication specification, mounting the previously-defined Volume to a known location inside of a Pod.`}</li>\n    </ol>\n    <p>{`To perform these steps in our GitOps implementation:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Step 1 is achieved through the artifacts defined in the `}<inlineCode parentName=\"li\">{`/env/base/credentials`}</inlineCode>{` subdirectory of either of the example environments.`}</li>\n      <li parentName=\"ol\">{`Step 2 is achieved through the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-volumes.yaml\"\n        }}><inlineCode parentName=\"a\">{`/services/fleetms/overlays/appsody-volumes.yaml`}</inlineCode></a>{` overlay.`}</li>\n      <li parentName=\"ol\">{`Step 3 is achieved through the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-volume-mounts.yaml\"\n        }}><inlineCode parentName=\"a\">{`/services/fleetms/overlays/appsody-volume-mounts.yaml`}</inlineCode></a>{` overlay and the inclusion of the well-known location of the injected Certificate via the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-env-patch.yaml\"\n        }}><inlineCode parentName=\"a\">{`/services/fleetms/overlays/appsody-env-patch.yaml`}</inlineCode></a>{` overlay.`}</li>\n    </ol>\n    <h2>{`Creating a new environment`}</h2>\n    <p>{`To create a new environment, you will want to use one of the environments described above as a template and refine it as needed.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Fork this repository.`}</li>\n      <li parentName=\"ol\">{`Copy the desired environment to a new subdirectory in the `}<inlineCode parentName=\"li\">{`/environments`}</inlineCode>{` directory.`}</li>\n      <li parentName=\"ol\">{`Update the necessary `}<inlineCode parentName=\"li\">{`overlays/kustomization.yaml`}</inlineCode>{` files and referenced files to suit your environment, removing unneccessary modifications and adding in any new requirements.`}</li>\n      <li parentName=\"ol\">{`Manually validate the environment via a `}<inlineCode parentName=\"li\">{`kubectl apply --dry-run -k environments/___your-new-environment___`}</inlineCode></li>\n      <li parentName=\"ol\">{`Commit and push your changes to your forked repository`}</li>\n      <li parentName=\"ol\">{`Follow along with our `}<a parentName=\"li\" {...{\n          \"href\": \"/refarch-kc/infrastructure/devops-continuous-delivery/\"\n        }}>{`Continuous Delivery`}</a>{` chapter to configure ArgoCD to deploy the environment.`}</li>\n    </ol>\n    <h1>{`Next steps`}</h1>\n    <p><em parentName=\"p\">{`For details on how the Continuous Delivery implementation leverages the GitOps artifacts,`}</em>{` reference the peer `}<a parentName=\"p\" {...{\n        \"href\": \"/refarch-kc/infrastructure/devops-continuous-delivery/\"\n      }}>{`Continuous Delivery (CD)`}</a>{` chapter of this manual.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}