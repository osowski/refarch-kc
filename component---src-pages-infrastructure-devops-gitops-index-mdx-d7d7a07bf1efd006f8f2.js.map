{"version":3,"sources":["webpack:///./src/pages/infrastructure/devops-gitops/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineNotification","PageDescription","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","kind","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAqBL,EAAc,sBACnCM,EAAkBN,EAAc,mBAChCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,E,oIACF,mBACD,OAAO,YAACM,EAAD,KAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAG5E,YAACP,EAAD,CAAoBQ,KAAK,UAAUD,QAAQ,sBAAqB,kCAAhE,uBACA,YAACN,EAAD,CAAiBM,QAAQ,mBAAzB,gLACyK,oCADzK,4DAGA,kCACA,4BAAW,mBAAGE,WAAW,KAAQ,CAC7B,KAAQ,8DADD,wCAAX,kFAEoI,mBAAGA,WAAW,KAAQ,CACtJ,KAAQ,wCADwH,kBAFpI,sEAIkG,mBAAGA,WAAW,KAAQ,CACpH,KAAQ,qCADsF,cAJlG,gGAMwH,0BAAYA,WAAW,KAAvB,sCANxH,UAOA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,YADD,mBAAX,KAEkC,kBAAIA,WAAW,KAAf,6BAFlC,0MAEkS,mBAAGA,WAAW,KAAQ,CACpT,KAAQ,0BADsR,aAFlS,gDAIuE,0BAAYA,WAAW,KAAvB,mBAJvE,+IAKA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,2DADD,qCAAX,iXAGA,gCACA,kMAAiL,mBAAGA,WAAW,KAAQ,CACnM,KAAQ,iDADqK,kBAAjL,qBAGA,qBAAG,kBAAIA,WAAW,KAAf,gBAAoC,mBAAGA,WAAW,MAAS,CACxD,KAAQ,sFADyB,uFAGvC,yTACA,wFAAuE,mBAAGA,WAAW,KAAQ,CACzF,KAAQ,gEAD2D,qBAAvE,4EAE2G,0BAAYA,WAAW,KAAvB,yBAF3G,2EAEwP,0BAAYA,WAAW,KAAvB,oDAFxP,mFAGA,8CACA,+DACA,oDACA,oCACA,qBAAG,kBAAIA,WAAW,KAAf,6FAAH,uBAAgJ,mBAAGA,WAAW,KAAQ,CAClK,KAAQ,2DADoI,4BAAhJ,6BAOJJ,EAAWK,gBAAiB","file":"component---src-pages-infrastructure-devops-gitops-index-mdx-d7d7a07bf1efd006f8f2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-kc/refarch-kc/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\"><strong>TODO</strong> - WORK IN PROGRESS</InlineNotification>\n    <PageDescription mdxType=\"PageDescription\">\nThe implemented DevOps pipelines for the Reefer Container Shipment solution reference implementation of the Event-Driven Reference Architecture. This chapter focuses on the <strong>GitOps</strong> capability implemented in the reference implementation.\n    </PageDescription>\n    <h1>{`Overview`}</h1>\n    <p>{`Our `}<a parentName=\"p\" {...{\n        \"href\": \"/refarch-kc/infrastructure/devops-continuous-integration/\"\n      }}>{`Continuous Integration (CI) approach`}</a>{` is one of “zero-infrastructure overhead”. To accomplish this goal, we utilize `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/features/actions\"\n      }}>{`GitHub Actions`}</a>{` to build and push a microservice’s associated container images to `}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.docker.com/u/ibmcase\"\n      }}>{`Docker Hub`}</a>{` for public consumption. The GitHub Actions workflows are defined in the owning repository’s `}<inlineCode parentName=\"p\">{`.github/workflows/dockerbuild.yaml`}</inlineCode>{` file.`}</p>\n    <p>{`Our `}<a parentName=\"p\" {...{\n        \"href\": \"#gitops\"\n      }}>{`GitOps approach`}</a>{`, `}<em parentName=\"p\">{`the topic of this chapter`}</em>{`, focuses on a single-repository, environment-per-subdirectory model which can be forked and cloned to replicate deployments to other clusters and environments. The reference implementation utilizes `}<a parentName=\"p\" {...{\n        \"href\": \"https://kustomize.io/\"\n      }}>{`Kustomize`}</a>{` as its templating technology to utilize the `}<inlineCode parentName=\"p\">{`app-deploy.yaml`}</inlineCode>{` files, provided by each individual microservice, as a base and then layer in environment-specific configuration and credentials as needed.`}</p>\n    <p>{`Our `}<a parentName=\"p\" {...{\n        \"href\": \"/refarch-kc/infrastructure/devops-continuous-delivery/\"\n      }}>{`Continuous Delivery (CD) approach`}</a>{` focuses on a GitOps-based delivery model, using a GitHub repository as a single source of truth for the deployment, management, and operations of our running application components. In this model, we have the flexibility to use multiple open-source technologies to apply the single source of truth from a given GitHub repository onto a desired cluster environment.`}</p>\n    <h1>{`GitOps`}</h1>\n    <p>{`If you are unfamiliar with GitOps as a practice, additional details around the background of GitOps and how it differs from traditional deployment models can be found in `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.weave.works/technologies/gitops/\"\n      }}>{`this blog post`}</a>{` from WeaveWorks.`}</p>\n    <p><em parentName=\"p\">{`Sourced from `}<a parentName=\"em\" {...{\n          \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/starter-template\"\n        }}>{`https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/starter-template`}</a></em></p>\n    <p>{`The templated YAMLs are generated with the names of the required ConfigMaps and Secrets specific to a namespace on the eventual target deployment cluster. This allows us to create a deployment artifact programmatically without exposing confidential and secret credentials via source code.`}</p>\n    <p>{`Once these YAMLs are generated, they are checked in to the main `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-cloud-architecture/refarch-kc-gitops\"\n      }}>{`GitOps repository`}</a>{` for the project, under a new branch with a branch name in the format of `}<inlineCode parentName=\"p\">{`<namespace>/<cluster>`}</inlineCode>{` for ease of identification. These will then have a folder structure of `}<inlineCode parentName=\"p\">{`/<component-name>/templates/<artifact-type>.yaml`}</inlineCode>{`, with most components providing Deployment, Service, and Route artifact YAMLs.`}</p>\n    <h2>{`Environment overview`}</h2>\n    <h2>{`Reference Implementation environments`}</h2>\n    <h2>{`Creating a new environment`}</h2>\n    <h1>{`Next steps`}</h1>\n    <p><em parentName=\"p\">{`For details on how the Continuous Delivery implementation leverages the GitOps artifacts,`}</em>{` reference the peer `}<a parentName=\"p\" {...{\n        \"href\": \"/refarch-kc/infrastructure/devops-continuous-delivery/\"\n      }}>{`Continuous Delivery (CD)`}</a>{` chapter of this manual.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}