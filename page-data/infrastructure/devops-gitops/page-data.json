{"componentChunkName":"component---src-pages-infrastructure-devops-gitops-index-mdx","path":"/infrastructure/devops-gitops/","result":{"pageContext":{"frontmatter":{"title":"GitOps","description":"The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture."},"relativePagePath":"/infrastructure/devops-gitops/index.mdx","titleType":"append","MdxNode":{"id":"c8923c67-c7d8-5cba-8a61-1ab2a8ca055c","children":[],"parent":"f976d1bf-ec9e-5179-8e3e-ebd8f1ef4aa0","internal":{"content":"---\ntitle: GitOps\ndescription: The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture.\n---\n\n<InlineNotification kind=\"warning\"><strong>TODO</strong> - WORK IN PROGRESS</InlineNotification>\n\n<PageDescription>\nThe implemented DevOps pipelines for the Reefer Container Shipment solution reference implementation of the Event-Driven Reference Architecture. This chapter focuses on the <strong>GitOps</strong> capability implemented in the reference implementation.\n</PageDescription>\n\n# Overview\n\nOur [Continuous Integration (CI) approach](/infrastructure/devops-continuous-integration/) is one of \"zero-infrastructure overhead\". To accomplish this goal, we utilize [GitHub Actions](https://github.com/features/actions) to build and push a microservice's associated container images to [Docker Hub](https://hub.docker.com/u/ibmcase) for public consumption. The GitHub Actions workflows are defined in the owning repository's `.github/workflows/dockerbuild.yaml` file.\n\nOur [GitOps approach](#gitops), _the topic of this chapter_, focuses on a single-repository, environment-per-subdirectory model which can be forked and cloned to replicate deployments to other clusters and environments. The reference implementation utilizes [Kustomize](https://kustomize.io/) as its templating technology to utilize the `app-deploy.yaml` files, provided by each individual microservice, as a base and then layer in environment-specific configuration and credentials as needed.\n\nOur [Continuous Delivery (CD) approach](/infrastructure/devops-continuous-delivery/) focuses on a GitOps-based delivery model, using a GitHub repository as a single source of truth for the deployment, management, and operations of our running application components. In this model, we have the flexibility to use multiple open-source technologies to apply the single source of truth from a given GitHub repository onto a desired cluster environment.\n\n# GitOps\n\nIf you are unfamiliar with GitOps as a practice, additional details around the background of GitOps and how it differs from traditional deployment models can be found in [this blog post](https://www.weave.works/technologies/gitops/) from WeaveWorks.\n\n_Sourced from https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/starter-template_\n\nThe templated YAMLs are generated with the names of the required ConfigMaps and Secrets specific to a namespace on the eventual target deployment cluster. This allows us to create a deployment artifact programmatically without exposing confidential and secret credentials via source code.\n\nOnce these YAMLs are generated, they are checked in to the main [GitOps repository](https://github.com/ibm-cloud-architecture/refarch-kc-gitops) for the project, under a new branch with a branch name in the format of `<namespace>/<cluster>` for ease of identification. These will then have a folder structure of `/<component-name>/templates/<artifact-type>.yaml`, with most components providing Deployment, Service, and Route artifact YAMLs.\n\n\n## Environment overview\n\n## Reference Implementation environments\n\n## Creating a new environment\n\n# Next steps\n\n_For details on how the Continuous Delivery implementation leverages the GitOps artifacts,_ reference the peer [Continuous Delivery (CD)](/infrastructure/devops-continuous-delivery/) chapter of this manual.\n","type":"Mdx","contentDigest":"a3705e7f911542de66680ecbffd5bd7b","counter":355,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"GitOps","description":"The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture."},"exports":{},"rawBody":"---\ntitle: GitOps\ndescription: The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture.\n---\n\n<InlineNotification kind=\"warning\"><strong>TODO</strong> - WORK IN PROGRESS</InlineNotification>\n\n<PageDescription>\nThe implemented DevOps pipelines for the Reefer Container Shipment solution reference implementation of the Event-Driven Reference Architecture. This chapter focuses on the <strong>GitOps</strong> capability implemented in the reference implementation.\n</PageDescription>\n\n# Overview\n\nOur [Continuous Integration (CI) approach](/infrastructure/devops-continuous-integration/) is one of \"zero-infrastructure overhead\". To accomplish this goal, we utilize [GitHub Actions](https://github.com/features/actions) to build and push a microservice's associated container images to [Docker Hub](https://hub.docker.com/u/ibmcase) for public consumption. The GitHub Actions workflows are defined in the owning repository's `.github/workflows/dockerbuild.yaml` file.\n\nOur [GitOps approach](#gitops), _the topic of this chapter_, focuses on a single-repository, environment-per-subdirectory model which can be forked and cloned to replicate deployments to other clusters and environments. The reference implementation utilizes [Kustomize](https://kustomize.io/) as its templating technology to utilize the `app-deploy.yaml` files, provided by each individual microservice, as a base and then layer in environment-specific configuration and credentials as needed.\n\nOur [Continuous Delivery (CD) approach](/infrastructure/devops-continuous-delivery/) focuses on a GitOps-based delivery model, using a GitHub repository as a single source of truth for the deployment, management, and operations of our running application components. In this model, we have the flexibility to use multiple open-source technologies to apply the single source of truth from a given GitHub repository onto a desired cluster environment.\n\n# GitOps\n\nIf you are unfamiliar with GitOps as a practice, additional details around the background of GitOps and how it differs from traditional deployment models can be found in [this blog post](https://www.weave.works/technologies/gitops/) from WeaveWorks.\n\n_Sourced from https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/starter-template_\n\nThe templated YAMLs are generated with the names of the required ConfigMaps and Secrets specific to a namespace on the eventual target deployment cluster. This allows us to create a deployment artifact programmatically without exposing confidential and secret credentials via source code.\n\nOnce these YAMLs are generated, they are checked in to the main [GitOps repository](https://github.com/ibm-cloud-architecture/refarch-kc-gitops) for the project, under a new branch with a branch name in the format of `<namespace>/<cluster>` for ease of identification. These will then have a folder structure of `/<component-name>/templates/<artifact-type>.yaml`, with most components providing Deployment, Service, and Route artifact YAMLs.\n\n\n## Environment overview\n\n## Reference Implementation environments\n\n## Creating a new environment\n\n# Next steps\n\n_For details on how the Continuous Delivery implementation leverages the GitOps artifacts,_ reference the peer [Continuous Delivery (CD)](/infrastructure/devops-continuous-delivery/) chapter of this manual.\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/infrastructure/devops-gitops/index.mdx"}}}}