{"componentChunkName":"component---src-pages-deployments-docker-mdx","path":"/deployments/docker/","result":{"pageContext":{"frontmatter":{"title":"Build and run using docker compose","description":"Build and run using docker compose"},"relativePagePath":"/deployments/docker.mdx","titleType":"append","MdxNode":{"id":"979e0299-0db2-50fe-8d6b-75f345fa4847","children":[],"parent":"5c734ae9-b3e8-5ebb-83a2-fed5d65d44ba","internal":{"content":"---\ntitle: Build and run using docker compose\ndescription: Build and run using docker compose\n---\n\nTo build and run the solution locally using docker, please follow the below instructions.\n\n## Get the app\n\ngit clone https://github.com/ibm-cloud-architecture/refarch-kc.git\n\ncd refarch-kc/\n\n./scripts/clone.sh\n\n## Setting up Kafka and Zookeeper\n\n1. Deploying Kafka and Zookeeper on Docker\n\n```\n$ cd docker && docker-compose -f backbone-compose.yml up -d >& backend.logs\n\n$ ./scripts/createLocalTopics.sh\n```\n\n## Fleet ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-ms/fleet-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name fleetms -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -d -p 9080:9080 -p 9444:9443 ibmcase/kc-fleetms\n```\n\n## Voyage ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-ms/voyages-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name voyages -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -e KAFKA_APIKEY=\"<your_kafka_api_key>\" -d -p 3100:3000 ibmcase/kc-voyagesms\n```\n\n## Order command ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-order-ms/order-command-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name ordercmd -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -e KAFKA_APIKEY=\"<your_kafka_api_key>\" -d -p 10080:9080 ibmcase/kc-ordercommandms\n```\n\n## Order query ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-order-ms/order-query-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name orderquery -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -e KAFKA_APIKEY=\"<your_kafka_api_key>\" -d -p 11080:9080 ibmcase/kc-orderqueryms\n```\n\n## Container ms\n\n1. Go to the repo\n\n```\ncd refarch-kc-container-ms/SpringContainerMS\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\ndocker run --name springcontainerms \\\n--network docker_default \\\n  -e KAFKA_ENV=$KAFKA_ENV \\\n  -e KAFKA_BROKERS=$KAFKA_BROKERS \\\n  -e KAFKA_APIKEY=$KAFKA_APIKEY \\\n  -e POSTGRESQL_URL=$POSTGRESQL_URL \\\n  -e POSTGRESQL_CA_PEM=\"$POSTGRESQL_CA_PEM\" \\\n  -e POSTGRESQL_USER=$POSTGRESQL_USER \\\n  -e POSTGRESQL_PWD=$POSTGRESQL_PWD \\\n  -e TRUSTSTORE_PWD=${TRUSTSTORE_PWD} \\\n  -p 8080:8080 -ti  ibmcase/kc-springcontainerms\n```\n\n## Web\n\n1. Go to the repo\n\n```\ncd refarch-kc-ui/\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\ndocker run -it --name kcsolution -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e FLEET_MS_URL=\"<fleetms_url\" ORDER_MS_URL=\"<orderms_url>\" VOYAGE_MS_URL=\"<voyagems_url>\" --link fleetms:fleetms --link voyages:voyages --link ordercmd:ordercmd --link orderquery:orderquery --link springcontainerms:springcontainerms -d -p 3110:3010 ibmcase/kc-ui\n```\n","type":"Mdx","contentDigest":"9e8f18fb6de87e374e85eb151603046b","counter":280,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Build and run using docker compose","description":"Build and run using docker compose"},"exports":{},"rawBody":"---\ntitle: Build and run using docker compose\ndescription: Build and run using docker compose\n---\n\nTo build and run the solution locally using docker, please follow the below instructions.\n\n## Get the app\n\ngit clone https://github.com/ibm-cloud-architecture/refarch-kc.git\n\ncd refarch-kc/\n\n./scripts/clone.sh\n\n## Setting up Kafka and Zookeeper\n\n1. Deploying Kafka and Zookeeper on Docker\n\n```\n$ cd docker && docker-compose -f backbone-compose.yml up -d >& backend.logs\n\n$ ./scripts/createLocalTopics.sh\n```\n\n## Fleet ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-ms/fleet-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name fleetms -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -d -p 9080:9080 -p 9444:9443 ibmcase/kc-fleetms\n```\n\n## Voyage ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-ms/voyages-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name voyages -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -e KAFKA_APIKEY=\"<your_kafka_api_key>\" -d -p 3100:3000 ibmcase/kc-voyagesms\n```\n\n## Order command ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-order-ms/order-command-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name ordercmd -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -e KAFKA_APIKEY=\"<your_kafka_api_key>\" -d -p 10080:9080 ibmcase/kc-ordercommandms\n```\n\n## Order query ms\n\n1. Go to the repo\n\n```\n$ cd refarch-kc-order-ms/order-query-ms\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\n$ docker run -it --name orderquery -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e KAFKA_ENV=\"<LOCAL or IBMCLOUD or ICP>\" -e KAFKA_APIKEY=\"<your_kafka_api_key>\" -d -p 11080:9080 ibmcase/kc-orderqueryms\n```\n\n## Container ms\n\n1. Go to the repo\n\n```\ncd refarch-kc-container-ms/SpringContainerMS\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\ndocker run --name springcontainerms \\\n--network docker_default \\\n  -e KAFKA_ENV=$KAFKA_ENV \\\n  -e KAFKA_BROKERS=$KAFKA_BROKERS \\\n  -e KAFKA_APIKEY=$KAFKA_APIKEY \\\n  -e POSTGRESQL_URL=$POSTGRESQL_URL \\\n  -e POSTGRESQL_CA_PEM=\"$POSTGRESQL_CA_PEM\" \\\n  -e POSTGRESQL_USER=$POSTGRESQL_USER \\\n  -e POSTGRESQL_PWD=$POSTGRESQL_PWD \\\n  -e TRUSTSTORE_PWD=${TRUSTSTORE_PWD} \\\n  -p 8080:8080 -ti  ibmcase/kc-springcontainerms\n```\n\n## Web\n\n1. Go to the repo\n\n```\ncd refarch-kc-ui/\n```\n\n2. Build the image\n\n```\n$ ./scripts/buildDocker.sh\n```\n\n3. Deploy on docker\n\n```\ndocker run -it --name kcsolution -e KAFKA_BROKERS=\"<your_kafka_brokers>\" -e FLEET_MS_URL=\"<fleetms_url\" ORDER_MS_URL=\"<orderms_url>\" VOYAGE_MS_URL=\"<voyagems_url>\" --link fleetms:fleetms --link voyages:voyages --link ordercmd:ordercmd --link orderquery:orderquery --link springcontainerms:springcontainerms -d -p 3110:3010 ibmcase/kc-ui\n```\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/deployments/docker.mdx"}}}}