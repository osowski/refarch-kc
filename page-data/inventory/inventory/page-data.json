{"componentChunkName":"component---src-pages-inventory-inventory-mdx","path":"/inventory/inventory/","result":{"pageContext":{"frontmatter":{"title":"Inventory","description":"Reefer Container Shipment solution's component, messages, topics and patterns inventory"},"relativePagePath":"/inventory/inventory.mdx","titleType":"append","MdxNode":{"id":"dfd8b2e7-7325-528f-b8e1-404ca1491b9c","children":[],"parent":"af7da2f5-e1a7-52ab-bd07-65207b13c86f","internal":{"content":"---\ntitle: Inventory\ndescription: Reefer Container Shipment solution's component, messages, topics and patterns inventory\n---\n\nThe following list represents the main components of our [Reefer Container Shipment reference application](https://ibm-cloud-architecture.github.io/refarch-kc/) for [Event Driven Architectures](https://ibm-cloud-architecture.github.io/refarch-eda/).\n\n- [User Interface](#user-interface)\n- [Orders](#orders)\n- [Fleet](#fleet)\n- [Voyages](#voyages)\n- [Containers](#containers)\n- [Telemetry](#telemetry)\n- [Simulator](#simulator)\n\nAs you will see for each of these components in their respective sections, these can be made up of several microservices. We try to follow the 12 factors for building cloud native applications as well as the best modern and agile development principles such as Domain Driven Design, Test Driven Development, Pair Programming, etc the best we can. However, in some cases, either for simplicity, team bandwidth or own evolution of the components, we might be at a point where we don't tie to the already mentioned best practices as much as we would like to. As we iterate and work through the components to develop and implement new Event Driven patterns as well as new client requirements, we will try to align to the best practices, again, as much as we can. We are also open for contributions, which we will very much appreciate, and have even written a contribution guideline for it [here](../contributing.mdx)\n\nFor each of the components above, we will relate them with the events they produce and consume, the Kafka topics they produce to and consume from and the EDA patterns they are part of.\n\n- [Events](#events)\n- [Topics](#topics)\n- [EDA Patterns](#eda-patterns)\n\n## User Interface\n\n![User Interface diagram](images/Slide1.png)\n\nDescription: The user interface for our Reefer Container Shipment reference application is implemented as a single microservice using Node.js and Angular.js. The goal of this component is to serve a user interface for customers to:\n\n- Log in\n- Create an order\n- List all orders\n- List all containers\n- Initiate shipping simulation\n\nGithub repository: [refarch-kc-ui](https://github.com/ibm-cloud-architecture/refarch-kc-ui)\n\nKafka topics it subscribes to: None\n\nKafka topics it produces to: None\n\n## Orders\n\nDescription: Main goal of the Orders component is to manage the shipping orders. This component is made up of two microservices, one called Order Command and the other Order Query. The reason for this component to be split into two microservices is to implement the [**Command Query Responsibility Segregation (CQRS)**](#command-query-responsibility-segregation-(cqrs)) pattern.\n\n### Order Command\n\n![Order Command diagram](images/Slide2.png)\n\nThis microservice will implement the write logic in the CQRS pattern. That is, will be in charge of managing the state of shipping orders.\n\nThis microservice has been implemented using MicroProfile 3.0. and runs on OpenLiberty.\n\nGithub repository: [refarch-kc-order-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms)\n\nFolder: [order-command-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/order-command-ms)\n\nKafka topics it subscribes to:\n\n- [Order Commands Topic](#order-commands-topic)\n- [Order Topic](#orders-topic)\n\nKafka topics it produces to:\n\n- [Order Commands Topic](#order-commands-topic)\n- [Order Topic](#orders-topic)\n- [Errors Topic](#errors-topic)\n\nEvents that listens (and reacts) to:\n\n- [Order Command Event](#order-command-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Voyage Not Found Event](#voyage-not-found-event)\n- [Order Spoilt Event](#order-spoilt-event)\n\nEvents that produces:\n\n- [Order Command Event](#order-command-event)\n- [Order Created Event](#order-created-event)\n- [Order Updated Event](#order-updated-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Error Event](#error-event)\n\nEDA Patterns that implements:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n- [SAGA](#saga)\n- [Consume-transform-produce Loop](#consume-transform-produce-loop)\n- [Order Cancellation](#order-cancellation)\n\n### Order Query\n\n![Order Query diagram](images/Slide3.png)\n\nThis microservice will implement the query logic in the CQRS pattern. That is, will be in charge of implementing any type of query that is needed based on building the necessary projections over the totality of the data. In order to build those projections, this microservice might well listen to several topics and events.\n\nThis microservice has been implemented using MicroProfile 3.0. and runs on OpenLiberty.\n\nGithub repository: [refarch-kc-order-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms)\n\nFolder: [order-query-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/order-query-ms)\n\nKafka topics it subscribes to:\n\n- [Order Topic](#orders-topic)\n- [Containers Topic](#containers-topic)\n\nKafka topics it produces to: None\n\nEvents that listens (and reacts) to:\n\n- [Order Created Event](#order-created-event)\n- [Order Updated Event](#order-updated-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Order Spoilt Event](#order-spoilt-event)\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Added Event](#container-added-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n- [Container Assigned Event](#container-assigned-event)\n\nEvents that produces: None\n\nEDA Patterns that implements:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\n## Fleet\n\nDescription: This microservice will manage the fleet of ships.\n\nGithub repository: [refarch-kc-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms)\n\nFolder: [fleet-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms/fleet-ms)\n\nKafka topics it subscribes to:\n\nKafka topics it produces to:\n\nEvents that listens (and reacts) to:\n\nEvents that produces:\n\nEDA Patterns that implements:\n\n## Voyages\n\n![Voyages diagram](images/Slide4.png)\n\nDescription: This microservice manages the voyages for each ship. A voyage consist of carrying a limited amount of goods from a source port to a destination port being the goods carried by a uniquely identified ship on a specific date. All those attributes make a voyage unique and these voyages are managed by this microservice. Voyages microservice will then be responsible to allocate a voyage to an order based on where this order needs to be carried from and to, the window time the goods need to be carried within and the amount of goods to be carried. So far, this microservice will assign a voyage to an order (and manage the remaining capacity on the ship making such voyage) if any suitable voyage is found and emit the consequent VoyageAssigned Event or will otherwise emit a VoyageNotFound Event.\n\nThis microservice is written in NodeJS.\n\nGithub repository: [refarch-kc-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms)\n\nFolder: [voyage-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms/voyage-ms)\n\nKafka topics it subscribes to:\n\n- [Order Topic](#orders-topic)\n\nKafka topics it produces to:\n\n- [Order Topic](#orders-topic)\n\nEvents that listens (and reacts) to:\n\n- [Order Created Event](#order-created-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n\nEvents that produces:\n\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Voyage Not Found Event](#voyage-not-found-event)\n\nEDA Patterns that implements:\n\n- [SAGA](#saga)\n\n## Containers\n\n![Containers diagram](images/Slide5.png)\n\nDescription: This microservice manages the container inventory. That is, this microservice will be in charge of keeping an inventory of all the containers registered in the system along with their status, size and location. When a new order is created and received, the container microservice will be in charge of assigning a container to this new shipping order based if a container is available that suits the order's quantity and source port. Otherwise, will emit a ContainerNotFound event for the interested parties in the overall Reefer Container Shipment solution.\n\nThis microservice will also manage any container anomaly during the shipping of goods. That is, this microservice will monitoring ContainerAnomaly Events received for any particular container and in the case that these are received, it will mark the container for maintenance, send a OrderSpoilt Event so that any other microservice in the overall solution is aware that the fresh goods this container was carrying are now spoilt and will call a Business Process Manager (BPM) process in to automatically trigger the assignment of a field engineer to repair the container when it reaches the destination port.\n\nThis microservice is implemented with Spring Framework and runs on Tomcat.\n\nGithub repository: [refarch-kc-container-ms](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms)\n\nKafka topics it subscribes to:\n\n- [Order Topic](#orders-topic)\n- [Containers Topic](#containers-topic)\n- [container Anomaly Retry Topic](#container-anomaly-retry-topic)\n\nKafka topics it produces to:\n\n- [Order Topic](#orders-topic)\n- [Containers Topic](#containers-topic)\n- [container Anomaly Retry Topic](#container-anomaly-retry-topic)\n- [Container Anomaly Dead Topic](#container-anomaly-dead-topic)\n\nEvents that listens (and reacts) to:\n\n- [Order Created Event](#order-created-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Container Added Event](#container-added-event)\n- [Container Anomaly Event](#container-anomaly-event)\n- [Container Anomaly Retry Event](#container-anomaly-retry-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n\nEvents that produces:\n\n- [Order Spoilt Event](#order-spoilt-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n- [Container Assigned Event](#container-assigned-event)\n- [Container Anomaly Retry Event](#container-anomaly-retry-event)\n- [Container Anomaly Dead Event](#container-anomaly-dead-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n\nEDA Patterns that implements:\n\n- [SAGA](#saga)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue(dlq))\n- [Container Anomaly](#container-anomaly)\n\n## Telemetry\n\n![Telemetry diagram](images/Slide6.png)\n\nDescription: This microservice will be responsible for listening to the [Reefer Telemetry Topic](#reefer-telemetry-topic) topic where the IOT sensor devices of the Reefer Containers will be sending their telemetry data to. These telemetry events will be read and used to contact a container anomaly prediction service based on Watson Machine Learning hosted on the IBM Cloud. Depending on whether the prediction service predicts a container anomaly, this Telemetry microservice will send a [Container Anomaly Event](#container-anomaly-event) to the [Containers Topic](#containers-topic) for the [Containers microservice](#containers) to handle the shipping goods spoilage.\n\nThis microservice has been implemented using the latest [Reactive Messaging](#reactive-messaging) feature of MicroProfile 3.0. running on the OpenLiberty server.\n\nGithub repository: [refarch-reefer-ml](https://github.com/ibm-cloud-architecture/refarch-reefer-ml)\n\nFolder: [scoring-mp](https://github.com/ibm-cloud-architecture/refarch-reefer-ml/scoring-mp)\n\nKafka topics it subscribes to:\n\n- [Reefer Telemetry Topic](#reefer-telemetry-topic)\n\nKafka topics it produces to:\n\n- [Containers Topic](#containers-topic)\n\nEvents that listens (and reacts) to:\n\n- [Container Telemetry Event](#container-telemetry-event)\n\nEvents that produces:\n\n- [Container Anomaly Event](#container-anomaly-event)\n\nEDA Patterns that implements:\n\n- [Reactive Messaging](#reactive-messaging)\n\n## Simulator\n\n![Simulator diagram](images/Slide7.png)\n\nDescription: The Simulator webapp is a simple python (3.7) flask web app exposing a REST POST end point to control the type of simulation to run and to produce Reefer telemetry events to kafka reeferTelemetry topic.\n\nThis microservice has been implemented using the Appsody python flask stack.\n\nGithub repository: [refarch-reefer-ml](https://github.com/ibm-cloud-architecture/refarch-reefer-ml)\n\nFolder: [simulator](https://github.com/ibm-cloud-architecture/refarch-reefer-ml/simulator)\n\nKafka topics it subscribes to: None\n\nKafka topics it produces to:\n\n- [Reefer Telemetry Topic](#reefer-telemetry-topic)\n\nEvents that listens (and reacts) to: None\n\nEvents that produces:\n\n- [Container Telemetry Event](#container-telemetry-event)\n\nEDA Patterns that implements: None\n\n## Events\n\n### Order Command Event\n\nDescription: These events are produced as a result of user interaction through the [User Interface](#user-interface). These events will command the creation, update or cancellation of a shipping order. In EDA space, a command is an action demanded or triggered by an actor. These events are of important relevance in the [Consume-transform-produce loop](#consume-transform-produce-loop) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Order Commands Topic](#order-commands-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n\nPatterns these events are relevant to:\n\n- [Consume-transform-produce loop](#consume-transform-produce-loop)\n\nData Schema: [Order Command Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderCommandEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"status\": \"toBeCreated\"\n  },\n  \"timestampMillis\": 1588010525662,\n  \"type\": \"CreateOrderCommand\",\n  \"version\": \"1\"\n}\n```\n\n### Order Created Event\n\nDescription: These events are produced as a result of a new shipping order being created. These events are emitted in order to inform any other component of the overall Reefer Container Shipment solution such as the [Containers](#containers) and [Voyage](#voyage) components, that are part of the [SAGA](#saga) pattern to find a container and a voyage to get allocated and assigned, or the [Order Query](#order-query) component, that will track the status of the orders and containers for the query part of the [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs)) pattern for the overall solution.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Order Query](#order-query)\n- [Containers](#containers)\n- [Voyage](#voyage)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Created Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderCreatedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"status\": \"pending\"\n  },\n  \"timestampMillis\": 1588010525896,\n  \"type\": \"OrderCreated\",\n  \"version\": \"1\"\n}\n```\n\n### Order Updated Event\n\nDescription: These events are produced as a result of a shipping order being updated. These events are emitted in order to inform any other component of the overall Reefer Container Shipment solution such as the [Containers](#containers) and [Voyage](#voyage) components, that are part of the [SAGA](#saga) pattern to find a container and a voyage to get allocated and assigned, or the [Order Query](#order-query) component, that will track the status of the orders and containers for the query part of the [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs)) pattern for the overall solution.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Order Query](#order-query)\n- [Containers](#containers)\n- [Voyage](#voyage)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Updated Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderUpdatedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"status\": \"pending\"\n  },\n  \"timestampMillis\": 1588010525896,\n  \"type\": \"OrderUpdated\",\n  \"version\": \"1\"\n}\n```\n\n### Order Spoilt Event\n\nDescription: These events denote that a container, which is carrying fresh goods from a source port to a destination port, has spoilt these fresh goods due to an anomaly detected by one or more of its IOT sensors.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Spoilt Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderSpoiltEvent.avsc)\n\nExample:\n\n```json\n{\n  \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n  \"payload\": {\n    \"containerID\": \"8919\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\"\n  },\n  \"timestamp\": 1588010710172,\n  \"type\": \"OrderSpoilt\"\n}\n```\n\n### Order Reject Event\n\nDescription: These events are produced as a result of receiving a [Container Not Found Event](#container-not-found-event) or [Voyage Not Found Event](#voyage-not-found-event) as part of the [SAGA](#saga) pattern and will trigger a compensation process for the components in that [SAGA](#saga) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Voyages](#voyages)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Reject Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderRejectEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"b00a3d0f-c9f9-4cbd-a6ea-36b8b455c489\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"reason\": \"A container could not be found for this order\",\n    \"status\": \"rejected\"\n  },\n  \"timestampMillis\": 1588010563056,\n  \"type\": \"OrderRejected\",\n  \"version\": \"1\"\n}\n```\n\n### Order Cancel Event\n\nDescription: These events are produced as a result of a user/administrator demanding/requesting the cancellation of a shipping order. These events will trigger the process described in the [Order Cancellation](#order-cancellation) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Voyages](#voyages)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n- [Order Cancellation](#order-cancellation)\n\nData Schema: [Order Cancel Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderCancelEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"containerID\": \"1392\",\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"649fa8b2-9340-423d-b08c-7fcc633b3a49\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"reason\": \"Cancel order command received\",\n    \"status\": \"cancelled\",\n    \"voyageID\": \"101\"\n  },\n  \"timestampMillis\": 1588010677588,\n  \"type\": \"OrderCancelled\",\n  \"version\": \"1\"\n}\n```\n\n### Error Event\n\nDescription: These events are produced as a result of any error that occurs in the [Order Command](#order-command) component.\n\nTopic these events are produced to/consumed from:\n\n- [Errors Topic](#errors-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events: None\n\nPatterns these events are relevant to: None\n\nData Schema: [Error Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/errorEvent.avsc)\n\nExample:\n\n```json\n{\n  \"errorMessage\" : \"Repository access issue\",\n  \"payload\": {\n    \"containerID\": \"1392\",\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"649fa8b2-9340-423d-b08c-7fcc633b3a49\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"reason\": \"Cancel order command received\",\n    \"status\": \"cancelled\",\n    \"voyageID\": \"101\"\n  },\n  \"timestampMillis\": 1588010677588,\n  \"type\": \"Error\",\n  \"version\": \"1\"\n}\n```\n\n### Container Added Event\n\nDescription: These events would make the [Containers](#containers) component to create a new container and add it to the container inventory it manages.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Added Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAddedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"brand\": \"itgtests-brand\",\n    \"capacity\": 100,\n    \"containerID\": \"8919\",\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"status\": \"Empty\",\n    \"type\": \"Reefer\"\n  },\n  \"timestamp\": 1588010515,\n  \"type\": \"ContainerAdded\"\n}\n```\n\n### Container Assigned Event\n\nDescription: These messages denote that a container has been assigned to a shipping order as this container suited the quantity and source port of the shipping order.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Assigned Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAssignedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"containerID\": \"8919\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\"\n  },\n  \"timestamp\": 1588010526382,\n  \"type\": \"ContainerAssignedToOrder\"\n}\n```\n\n### Container Allocated Event\n\nDescription: These events denote that a container, to carry the amount of fresh goods and from the source port specified in the shipping order, has been found and allocated to a shipping order, and viceversa, as part of the [SAGA](#saga) pattern for a long running transaction. These events are emitted by the [Containers](#containers) component.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Allocated Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAllocatedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n  \"payload\": {\n    \"containerID\": \"8919\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\"\n  },\n  \"timestamp\": 1588010526294,\n  \"type\": \"ContainerAllocated\"\n}\n```\n\n### Container Not Found Event\n\nDescription: These events denote that a container to carry the amount of fresh goods from the source port specified in a new shipping order could not be found. As a result, the new shipping order will become rejected.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n\nData Schema: [Container Not Found Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerNotFoundEvent.avsc)\n\nExample:\n\n```json\n{\n  \"orderID\": \"b00a3d0f-c9f9-4cbd-a6ea-36b8b455c489\",\n  \"payload\": {\n    \"orderID\": \"b00a3d0f-c9f9-4cbd-a6ea-36b8b455c489\",\n    \"reason\": \"A container could not be found for this order\"\n  },\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerNotFound\"\n}\n```\n\n### Container Telemetry Event\n\nDescription: These events are produced by the [Simulator](#simulator) to simulate the container's IOT sensor telemetries that are then consumed by the [#Telemetry] component for the [Container Anomaly](#container-anomaly) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Simulator](#simulator)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n\nData Schema: [Container Telemetry Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerTelemetryEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"1111\",\n  \"payload\": \"(1111, 2020-01-15 17:59:45, P05, 5.02702153, 5., 20.52035697, 2.62176459, 0, 1, 5, 21.56977522, 75.97754859, 39.85714797, 110.74727473, True, True, True, 37.8226902168957, -122.324895, 0)\",\n  \"timestamp\": \"2020-01-15 17:59:45\",\n  \"type\": \"ReeferTelemetries\"\n}\n```\n\n### Container Anomaly Event\n\nDescription: These events denote an anomaly being predicted for a container based on the telemetry reported by the IOT sensors in the containers. These events will trigger the Business Process Manager (BPM) process whereby a field engineer will get the container assigned in order to repair it. These events are part of the [Container Anomaly](#container-anomaly), [Reactive Messaging](#reactive-messaging) and [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) patterns.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Telemetry](#telemetry)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq))\n- [Reactive Messaging](#reactive-messaging)\n\nData Schema: [Container Anomaly Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAnomalyEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"ambiant_temperature\": 19.8447,\n    \"carbon_dioxide_level\": 4.42579,\n    \"content_type\": 2,\n    \"defrost_cycle\": 6,\n    \"humidity_level\": 60.3148,\n    \"kilowatts\": 3.44686,\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"nitrogen_level\": 79.4046,\n    \"oxygen_level\": 20.4543,\n    \"target_temperature\": 6,\n    \"temperature\": 5.49647,\n    \"time_door_open\": 0.822024,\n    \"vent_1\": true,\n    \"vent_2\": true,\n    \"vent_3\": true\n  },\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerAnomaly\"\n}\n```\n\n### Container Anomaly Retry Event\n\nDescription: These events denote that the Business Process Manager (BPM) process was not called successfully and, as a result, another call attempt will be made. These events are part of the [Container Anomaly](#container-anomaly) and [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) patterns.\n\nTopic these events are produced to/consumed from:\n\n- [container Anomaly Retry Topic](#container-anomaly-retry-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq))\n\nData Schema: [Container Anomaly Retry Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAnomalyRetryEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"5982\",\n  \"payload\": {\n    \"ambiant_temperature\": 19.8447,\n    \"carbon_dioxide_level\": 4.42579,\n    \"content_type\": 2,\n    \"defrost_cycle\": 6,\n    \"humidity_level\": 60.3148,\n    \"kilowatts\": 3.44686,\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"nitrogen_level\": 79.4046,\n    \"oxygen_level\": 20.4543,\n    \"target_temperature\": 6,\n    \"temperature\": 5.49647,\n    \"time_door_open\": 0.822024,\n    \"vent_1\": true,\n    \"vent_2\": true,\n    \"vent_3\": true\n  },\n  \"retries\": 1,\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerAnomalyRetry\"\n}\n```\n\n### Container Anomaly Dead Event\n\nDescription: These events denote that the Business Process Manager (BPM) process was not called successfully either because the [Containers](#containers) component could not successfully authenticate against the Business Process Manager (BPM) or the call to the process did not succeed despite the retries. These events will keep the original container anomaly message's data and a reason for this message to happen for further analysis by system administrators. These events are part of the [Container Anomaly](#container-anomaly) and [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) patterns.\n\nTopic these events are produced to/consumed from:\n\n- [Container Anomaly Dead Topic](#container-anomaly-dead-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events: None\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq))\n\nData Schema: [Container Anomaly Dead Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAnomalyDeadEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"5982\",\n  \"payload\": {\n    \"ambiant_temperature\": 19.8447,\n    \"carbon_dioxide_level\": 4.42579,\n    \"content_type\": 2,\n    \"defrost_cycle\": 6,\n    \"humidity_level\": 60.3148,\n    \"kilowatts\": 3.44686,\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"nitrogen_level\": 79.4046,\n    \"oxygen_level\": 20.4543,\n    \"target_temperature\": 6,\n    \"temperature\": 5.49647,\n    \"time_door_open\": 0.822024,\n    \"vent_1\": true,\n    \"vent_2\": true,\n    \"vent_3\": true\n  },\n  \"reason\": \"No more BPM process retries left\",\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerAnomalyDead\"\n}\n\n```\n\n### Container On Maintenance Event\n\nDescription: These events denote that a container has been set into maintenance mode as a result of a field engineer getting the container assigned to be repaired due to an anomaly being reported for such container. These events are a consequence of the [Container Anomaly](#container-anomaly) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly) pattern.\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container On Maintenance Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerOnMaintenanceEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"brand\": \"itgtests-brand\",\n    \"capacity\": 100,\n    \"containerID\": \"8919\",\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"status\": \"Empty\",\n    \"type\": \"Reefer\"\n  },\n  \"timestamp\": 1588010716374,\n  \"type\": \"ContainerOnMaintenance\"\n}\n```\n\n### Container Off Maintenance Event\n\nDescription: These events denote that a container has been set out of maintenance mode as a result of a field engineer having repaired the container as a result of a container anomaly reported. These events are a consequence of the [Container Anomaly](#container-anomaly) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Containers](#containers)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly) pattern.\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Off Maintenance Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerOffMaintenanceEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"brand\": \"itgtests-brand\",\n    \"capacity\": 100,\n    \"containerID\": \"8919\",\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"status\": \"Empty\",\n    \"type\": \"Reefer\"\n  },\n  \"timestamp\": 1588010721423,\n  \"type\": \"ContainerOffMaintenance\"\n}\n\n```\n\n### Voyage Assigned Event\n\nDescription: These events denote that a voyage has been found and assigned to a shipping order, and viceversa, as part of the [SAGA](#saga) pattern for a long running transaction which is triggered as a result of a new shipping order being created. A voyage is a unique carriage of fresh goods by a ship from a source port to a destination port on a specific date.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Voyages](#voyages)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Voyage Assigned Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/voyage/voyageAssignedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"voyageID\": \"101\"\n  },\n  \"timestamp\": 1588010536409,\n  \"type\": \"VoyageAssigned\",\n  \"version\": \"1\"\n}\n```\n\n### Voyage Not Found Event\n\nDescription: These events denote that a voyage for carrying the amount of fresh goods from the source port to the destination port on the specific date could not be found. As a result, the new shipping order will become rejected.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Voyages](#voyages)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n\nData Schema: [Voyage Not Found Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/voyage/voyageNotFoundEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"orderID\": \"564fa4ac-836a-4826-90f7-8ae50dd90790\",\n    \"reason\": \"Insufficient free capacity\"\n  },\n  \"timestamp\": 1588010613958,\n  \"type\": \"VoyageNotFound\",\n  \"version\": \"1\"\n}\n```\n\n## Topics\n\nThis section tries to list all the topics being used in the Reefer Container Shipment reference application and the events that will flow through them.\n\n### Order Commands Topic\n\nTopic name: **order-commands**\n\nDescription: The purpose for this topic is not other than to store the commands requested from users for creating, updating and cancelling orders for the [Order Command](#order-command) component to process these later by implementing the [Consume-transform-produce Loop](#consume-transform-produce-loop) pattern.\n\nComponents that produce events to this topic:\n\n- [Order Command](#order-command)\n\nComponents that consume events from this topic:\n\n- [Order Command](#order-command)\n\nMessages that flow through:\n\n- [Order Command Event](#order-command-event)\n\n### Orders Topic\n\nTopic name: **orders**\n\nDescription: This is probably the busiest topic in the overall Reefer Container Shipment reference application. This topic would be the place for any event that has to do with shipping orders. From having events from the [Order Command](#order-command) to notify other components of the solution that orders have been created, updated, cancelled and rejected to having events from other components to notify that an order has got a container allocated, a voyage assigned or event that a container has spoilt the fresh goods it is carrying due to an anomaly in the container.\n\nComponents that produce events to this topic:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n- [Containers](#containers)\n- [Voyages](#voyages)\n\nComponents that consume events from this topic:\n\n- [Order Command](#order-command)\n- [Containers](#containers)\n- [Voyages](#voyages)\n\nMessages that flow through:\n\n- [Order Created Event](#order-created-event)\n- [Order Updated Event](#order-updated-event)\n- [Order Spoilt Event](#order-spoilt-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Voyage Not Found Event](#voyage-not-found-event)\n\n### Errors Topic\n\nTopic name: **errors**\n\nDescription: Messages in this topic will denote errors while processing user commands by the [Order Command](#order-command) component.\n\nComponents that produce events to this topic:\n\n- [Order Command](#order-command)\n\nComponents that consume events from this topic: None\n\nMessages that flow through:\n\n- [Error Event](#error-event)\n\n### Containers Topic\n\nTopic name: **containers**\n\nDescription: This is the second busiest topic of the overall Reefer Container Shipment reference application since it will be used for creating containers, receiving container anomalies, setting containers to maintenance, etc.\n\nComponents that produce events to this topic:\n\n- [Containers](#containers)\n- [Telemetry](#telemetry)\n\nComponents that consume events from this topic:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nMessages that flow through:\n\n- [Container Added Event](#container-added-event)\n- [Container Assigned Event](#container-assigned-event)\n- [Container Anomaly Event](#container-anomaly-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n\n### Container Anomaly Retry Topic\n\nTopic name: **container-anomaly-retry**\n\nDescription: This topic will only contain [Container Anomaly Retry Events](#container-anomaly-retry-event) as part of the [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) pattern implementation.\n\nComponents that produce events to this topic:\n\n- [Containers](#containers)\n\nComponents that consume events from this topic:\n\n- [Containers](#containers)\n\nMessages that flow through:\n\n- [Container Anomaly Retry Event](#container-anomaly-retry-event)\n\n### Container Anomaly Dead Topic\n\nTopic name: **container-anomaly-dead**\n\nDescription: This topic will only contain [Container Anomaly Dead Events](#container-anomaly-dead-event) as part of the [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) pattern implementation.\n\nComponents that produce events to this topic:\n\n- [Containers](#containers)\n\nComponents that consume events from this topic:\n\n- [Containers](#containers)\n\nMessages that flow through:\n\n- [Container Anomaly Dead Event](#container-anomaly-dead-event)\n\n### Reefer Telemetry Topic\n\nTopic name: **reefer-telemetry**\n\nDescription: This topic will only hold [Container Telemetry Events](#container-telemetry-event) as part of the [Container Anomaly](#container-anomaly) and [Reactive Messaging](#reactive-messaging) patterns. These events are simply the sensor telemetries reported back from the containers.\n\nComponents that produce events to this topic:\n\n- [Simulator](#simulator)\n\nComponents that consume events from this topic:\n\n- [Telemetry](#telemetry)\n\nMessages that flow through:\n\n- [Container Telemetry Event](#container-telemetry-event)\n\n## EDA patterns\n\n### Command Query Responsibility Segregation (CQRS)\n\nRefactor a domain model to separate operations for querying data and operations for updating data so that they may be handled independently.\n\nThe CQRS pattern strictly segregates operations that read data from operations that update data. An operation can read data (the R in CRUD) or can write data (the CUD in CRUD), but not both.\n\nYou can read more about the Command Query Responsibility Segregation (CQRS) [here](https://ibm-cloud-architecture.github.io/refarch-eda/design-patterns/cqrs/)\n\n### Consume-transform-produce Loop\n\nThis pattern has been used along with the [Event Sourcing pattern](https://ibm-cloud-architecture.github.io/refarch-eda/design-patterns/event-sourcing/) and [the commands concept](https://www.enterpriseintegrationpatterns.com/patterns/messaging/CommandMessage.html) in Event Driven Architectures to ensure that any request (command) from users is eventually attended and processed by our system.\n\nThe most critical part is the processing of those commands published in the [Order Commands Topic](#order-commands-topic) of our event backbone that correspond to customer requests. We want to be able to successfully process all of them regardless of how many actions these entail, making sure these actions are all executed and we get confirmation of those. We want to process these actions in a transaction-like manner so that a request is not successfully marked as processed unless all actions were successfully executed.\n\nThe key of this loop is that the produced event to the [Orders Topic](#orders-topic) as the last action of the request (so that all previous actions have successfully been executed already) will be produced along with the offset commitment for the command read as a transaction. That is, either both the event to the [Orders Topic](#orders-topic) is produced and the offset for the command read from the [Order Commands Topic](#order-commands-topic) is committed or none of them happen.\n\nYou can read more about this pattern [here](https://ibm-cloud-architecture.github.io/refarch-kc/orders/order/)\n\n### SAGA\n\nThe Saga pattern help to support a long running transaction that can be broken up to a collection of sub transactions that can be interleaved any way with other transactions. With microservice each transaction updates data within a single service, each subsequent steps may be triggered by previous completion.\n\nYou can read more about the SAGA pattern [here](https://ibm-cloud-architecture.github.io/refarch-eda/design-patterns/saga) and have a closer look at how we have implemented it in our Reefer Container Shipment solution [here](https://ibm-cloud-architecture.github.io/refarch-kc/saga/saga)\n\n### Order Cancellation\n\nThis isn't as much of a pattern as it is of a use case. This use case consist of giving the ability to the Reefer Container Shipment administrator/operator or a customer of its services to cancel an order. However, because the creation of an order is part of a SAGA pattern where for getting an order ready for delivery other several components of your overall solution need to work together, the cancellation of such order requires a **compensation process** which is more of a piece of the SAGA pattern and thus the special mentioning in this documentation.\n\nYou can read more about the end-to-end cancellation process with the compensation process [here](https://ibm-cloud-architecture.github.io/refarch-kc/cancellation/cancellation)\n\n### Container Anomaly\n\nAgain, the Container Anomaly is more of a use case than a pattern itself. We have implemented a Container Anomaly use case whereby our [Reefer containers will send telemetry health status](#simulator), in terms of temperature, CO2 level, power level, etc, to a [Reefer Telemetry Agent](#telemetry), that we have built using the Reactive Messaging feature from the MicroProfile 3.0 specification onwards, through a [Reefer Telemetry Topic](#reefer-telemetry-topic). This [Reefer Telemetry Agent](#telemetry) will, in turn, call an Anomaly Detection Scoring service we have built following our Data and AI Reference Architecture that will determine whether there is an anomaly in a given containers based on the data sent by their IoT sensors. If an anomaly is predicted, a [Container Anomaly Event](#container-anomaly-event) will get dropped into the [Containers Topic](#containers-topic) the [container management component](#containers) of our Reefer Container Reference Application listens to. The [container management component](#containers) will call an IBM Business Process Management (BPM) process which will end up with a field engineer fixing the container.\n\nYou can read more about the implementation of this use case [here](https://ibm-cloud-architecture.github.io/refarch-kc/containerAnomaly/containerAnomaly/)\n\n### Dead Letter Queue (DLQ)\n\nIn distributed systems, it is common to find mechanisms for retrying calls to other, potentially external, services and fail gracefully if that service is unavailable for any reason.\n\nYou can read more about using non-blocking request reprocessing and dead letter queues (DLQ) to achieve decoupled, observable error-handling without disrupting real-time traffic in the context of the [Container Anomaly Use Case](#container-anomaly) of our Reefer Container Reference Application [here](https://ibm-cloud-architecture.github.io/refarch-kc/dlq/dlq)\n\n### Reactive Messaging\n\nReactive Systems provide an architecture style to deliver responsive systems. By infusing asynchronous messaging passing at the core of the system, applications enforcing the reactive system’s characteristics are inherently resilient and become more elastic by scaling up and down the number of message consumers. Microservices as part of reactive systems interact using messages. The MicroProfile Reactive Messaging specification aims to deliver applications embracing the characteristics of reactive systems.\n\nYou can read more about how we have implemented the [Telemetry](#telemetry) component as a reactive system by using the MicroProfile Reactive Messaging feature [here](https://ibm-cloud-architecture.github.io/refarch-reefer-ml/infuse/dev-scoring/)\n","type":"Mdx","contentDigest":"01d135343a0f5ecbe003e3fbaaf394e6","counter":286,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Inventory","description":"Reefer Container Shipment solution's component, messages, topics and patterns inventory"},"exports":{},"rawBody":"---\ntitle: Inventory\ndescription: Reefer Container Shipment solution's component, messages, topics and patterns inventory\n---\n\nThe following list represents the main components of our [Reefer Container Shipment reference application](https://ibm-cloud-architecture.github.io/refarch-kc/) for [Event Driven Architectures](https://ibm-cloud-architecture.github.io/refarch-eda/).\n\n- [User Interface](#user-interface)\n- [Orders](#orders)\n- [Fleet](#fleet)\n- [Voyages](#voyages)\n- [Containers](#containers)\n- [Telemetry](#telemetry)\n- [Simulator](#simulator)\n\nAs you will see for each of these components in their respective sections, these can be made up of several microservices. We try to follow the 12 factors for building cloud native applications as well as the best modern and agile development principles such as Domain Driven Design, Test Driven Development, Pair Programming, etc the best we can. However, in some cases, either for simplicity, team bandwidth or own evolution of the components, we might be at a point where we don't tie to the already mentioned best practices as much as we would like to. As we iterate and work through the components to develop and implement new Event Driven patterns as well as new client requirements, we will try to align to the best practices, again, as much as we can. We are also open for contributions, which we will very much appreciate, and have even written a contribution guideline for it [here](../contributing.mdx)\n\nFor each of the components above, we will relate them with the events they produce and consume, the Kafka topics they produce to and consume from and the EDA patterns they are part of.\n\n- [Events](#events)\n- [Topics](#topics)\n- [EDA Patterns](#eda-patterns)\n\n## User Interface\n\n![User Interface diagram](images/Slide1.png)\n\nDescription: The user interface for our Reefer Container Shipment reference application is implemented as a single microservice using Node.js and Angular.js. The goal of this component is to serve a user interface for customers to:\n\n- Log in\n- Create an order\n- List all orders\n- List all containers\n- Initiate shipping simulation\n\nGithub repository: [refarch-kc-ui](https://github.com/ibm-cloud-architecture/refarch-kc-ui)\n\nKafka topics it subscribes to: None\n\nKafka topics it produces to: None\n\n## Orders\n\nDescription: Main goal of the Orders component is to manage the shipping orders. This component is made up of two microservices, one called Order Command and the other Order Query. The reason for this component to be split into two microservices is to implement the [**Command Query Responsibility Segregation (CQRS)**](#command-query-responsibility-segregation-(cqrs)) pattern.\n\n### Order Command\n\n![Order Command diagram](images/Slide2.png)\n\nThis microservice will implement the write logic in the CQRS pattern. That is, will be in charge of managing the state of shipping orders.\n\nThis microservice has been implemented using MicroProfile 3.0. and runs on OpenLiberty.\n\nGithub repository: [refarch-kc-order-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms)\n\nFolder: [order-command-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/order-command-ms)\n\nKafka topics it subscribes to:\n\n- [Order Commands Topic](#order-commands-topic)\n- [Order Topic](#orders-topic)\n\nKafka topics it produces to:\n\n- [Order Commands Topic](#order-commands-topic)\n- [Order Topic](#orders-topic)\n- [Errors Topic](#errors-topic)\n\nEvents that listens (and reacts) to:\n\n- [Order Command Event](#order-command-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Voyage Not Found Event](#voyage-not-found-event)\n- [Order Spoilt Event](#order-spoilt-event)\n\nEvents that produces:\n\n- [Order Command Event](#order-command-event)\n- [Order Created Event](#order-created-event)\n- [Order Updated Event](#order-updated-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Error Event](#error-event)\n\nEDA Patterns that implements:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n- [SAGA](#saga)\n- [Consume-transform-produce Loop](#consume-transform-produce-loop)\n- [Order Cancellation](#order-cancellation)\n\n### Order Query\n\n![Order Query diagram](images/Slide3.png)\n\nThis microservice will implement the query logic in the CQRS pattern. That is, will be in charge of implementing any type of query that is needed based on building the necessary projections over the totality of the data. In order to build those projections, this microservice might well listen to several topics and events.\n\nThis microservice has been implemented using MicroProfile 3.0. and runs on OpenLiberty.\n\nGithub repository: [refarch-kc-order-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms)\n\nFolder: [order-query-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/order-query-ms)\n\nKafka topics it subscribes to:\n\n- [Order Topic](#orders-topic)\n- [Containers Topic](#containers-topic)\n\nKafka topics it produces to: None\n\nEvents that listens (and reacts) to:\n\n- [Order Created Event](#order-created-event)\n- [Order Updated Event](#order-updated-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Order Spoilt Event](#order-spoilt-event)\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Added Event](#container-added-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n- [Container Assigned Event](#container-assigned-event)\n\nEvents that produces: None\n\nEDA Patterns that implements:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\n## Fleet\n\nDescription: This microservice will manage the fleet of ships.\n\nGithub repository: [refarch-kc-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms)\n\nFolder: [fleet-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms/fleet-ms)\n\nKafka topics it subscribes to:\n\nKafka topics it produces to:\n\nEvents that listens (and reacts) to:\n\nEvents that produces:\n\nEDA Patterns that implements:\n\n## Voyages\n\n![Voyages diagram](images/Slide4.png)\n\nDescription: This microservice manages the voyages for each ship. A voyage consist of carrying a limited amount of goods from a source port to a destination port being the goods carried by a uniquely identified ship on a specific date. All those attributes make a voyage unique and these voyages are managed by this microservice. Voyages microservice will then be responsible to allocate a voyage to an order based on where this order needs to be carried from and to, the window time the goods need to be carried within and the amount of goods to be carried. So far, this microservice will assign a voyage to an order (and manage the remaining capacity on the ship making such voyage) if any suitable voyage is found and emit the consequent VoyageAssigned Event or will otherwise emit a VoyageNotFound Event.\n\nThis microservice is written in NodeJS.\n\nGithub repository: [refarch-kc-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms)\n\nFolder: [voyage-ms](https://github.com/ibm-cloud-architecture/refarch-kc-ms/voyage-ms)\n\nKafka topics it subscribes to:\n\n- [Order Topic](#orders-topic)\n\nKafka topics it produces to:\n\n- [Order Topic](#orders-topic)\n\nEvents that listens (and reacts) to:\n\n- [Order Created Event](#order-created-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n\nEvents that produces:\n\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Voyage Not Found Event](#voyage-not-found-event)\n\nEDA Patterns that implements:\n\n- [SAGA](#saga)\n\n## Containers\n\n![Containers diagram](images/Slide5.png)\n\nDescription: This microservice manages the container inventory. That is, this microservice will be in charge of keeping an inventory of all the containers registered in the system along with their status, size and location. When a new order is created and received, the container microservice will be in charge of assigning a container to this new shipping order based if a container is available that suits the order's quantity and source port. Otherwise, will emit a ContainerNotFound event for the interested parties in the overall Reefer Container Shipment solution.\n\nThis microservice will also manage any container anomaly during the shipping of goods. That is, this microservice will monitoring ContainerAnomaly Events received for any particular container and in the case that these are received, it will mark the container for maintenance, send a OrderSpoilt Event so that any other microservice in the overall solution is aware that the fresh goods this container was carrying are now spoilt and will call a Business Process Manager (BPM) process in to automatically trigger the assignment of a field engineer to repair the container when it reaches the destination port.\n\nThis microservice is implemented with Spring Framework and runs on Tomcat.\n\nGithub repository: [refarch-kc-container-ms](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms)\n\nKafka topics it subscribes to:\n\n- [Order Topic](#orders-topic)\n- [Containers Topic](#containers-topic)\n- [container Anomaly Retry Topic](#container-anomaly-retry-topic)\n\nKafka topics it produces to:\n\n- [Order Topic](#orders-topic)\n- [Containers Topic](#containers-topic)\n- [container Anomaly Retry Topic](#container-anomaly-retry-topic)\n- [Container Anomaly Dead Topic](#container-anomaly-dead-topic)\n\nEvents that listens (and reacts) to:\n\n- [Order Created Event](#order-created-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Container Added Event](#container-added-event)\n- [Container Anomaly Event](#container-anomaly-event)\n- [Container Anomaly Retry Event](#container-anomaly-retry-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n\nEvents that produces:\n\n- [Order Spoilt Event](#order-spoilt-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n- [Container Assigned Event](#container-assigned-event)\n- [Container Anomaly Retry Event](#container-anomaly-retry-event)\n- [Container Anomaly Dead Event](#container-anomaly-dead-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n\nEDA Patterns that implements:\n\n- [SAGA](#saga)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue(dlq))\n- [Container Anomaly](#container-anomaly)\n\n## Telemetry\n\n![Telemetry diagram](images/Slide6.png)\n\nDescription: This microservice will be responsible for listening to the [Reefer Telemetry Topic](#reefer-telemetry-topic) topic where the IOT sensor devices of the Reefer Containers will be sending their telemetry data to. These telemetry events will be read and used to contact a container anomaly prediction service based on Watson Machine Learning hosted on the IBM Cloud. Depending on whether the prediction service predicts a container anomaly, this Telemetry microservice will send a [Container Anomaly Event](#container-anomaly-event) to the [Containers Topic](#containers-topic) for the [Containers microservice](#containers) to handle the shipping goods spoilage.\n\nThis microservice has been implemented using the latest [Reactive Messaging](#reactive-messaging) feature of MicroProfile 3.0. running on the OpenLiberty server.\n\nGithub repository: [refarch-reefer-ml](https://github.com/ibm-cloud-architecture/refarch-reefer-ml)\n\nFolder: [scoring-mp](https://github.com/ibm-cloud-architecture/refarch-reefer-ml/scoring-mp)\n\nKafka topics it subscribes to:\n\n- [Reefer Telemetry Topic](#reefer-telemetry-topic)\n\nKafka topics it produces to:\n\n- [Containers Topic](#containers-topic)\n\nEvents that listens (and reacts) to:\n\n- [Container Telemetry Event](#container-telemetry-event)\n\nEvents that produces:\n\n- [Container Anomaly Event](#container-anomaly-event)\n\nEDA Patterns that implements:\n\n- [Reactive Messaging](#reactive-messaging)\n\n## Simulator\n\n![Simulator diagram](images/Slide7.png)\n\nDescription: The Simulator webapp is a simple python (3.7) flask web app exposing a REST POST end point to control the type of simulation to run and to produce Reefer telemetry events to kafka reeferTelemetry topic.\n\nThis microservice has been implemented using the Appsody python flask stack.\n\nGithub repository: [refarch-reefer-ml](https://github.com/ibm-cloud-architecture/refarch-reefer-ml)\n\nFolder: [simulator](https://github.com/ibm-cloud-architecture/refarch-reefer-ml/simulator)\n\nKafka topics it subscribes to: None\n\nKafka topics it produces to:\n\n- [Reefer Telemetry Topic](#reefer-telemetry-topic)\n\nEvents that listens (and reacts) to: None\n\nEvents that produces:\n\n- [Container Telemetry Event](#container-telemetry-event)\n\nEDA Patterns that implements: None\n\n## Events\n\n### Order Command Event\n\nDescription: These events are produced as a result of user interaction through the [User Interface](#user-interface). These events will command the creation, update or cancellation of a shipping order. In EDA space, a command is an action demanded or triggered by an actor. These events are of important relevance in the [Consume-transform-produce loop](#consume-transform-produce-loop) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Order Commands Topic](#order-commands-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n\nPatterns these events are relevant to:\n\n- [Consume-transform-produce loop](#consume-transform-produce-loop)\n\nData Schema: [Order Command Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderCommandEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"status\": \"toBeCreated\"\n  },\n  \"timestampMillis\": 1588010525662,\n  \"type\": \"CreateOrderCommand\",\n  \"version\": \"1\"\n}\n```\n\n### Order Created Event\n\nDescription: These events are produced as a result of a new shipping order being created. These events are emitted in order to inform any other component of the overall Reefer Container Shipment solution such as the [Containers](#containers) and [Voyage](#voyage) components, that are part of the [SAGA](#saga) pattern to find a container and a voyage to get allocated and assigned, or the [Order Query](#order-query) component, that will track the status of the orders and containers for the query part of the [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs)) pattern for the overall solution.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Order Query](#order-query)\n- [Containers](#containers)\n- [Voyage](#voyage)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Created Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderCreatedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"status\": \"pending\"\n  },\n  \"timestampMillis\": 1588010525896,\n  \"type\": \"OrderCreated\",\n  \"version\": \"1\"\n}\n```\n\n### Order Updated Event\n\nDescription: These events are produced as a result of a shipping order being updated. These events are emitted in order to inform any other component of the overall Reefer Container Shipment solution such as the [Containers](#containers) and [Voyage](#voyage) components, that are part of the [SAGA](#saga) pattern to find a container and a voyage to get allocated and assigned, or the [Order Query](#order-query) component, that will track the status of the orders and containers for the query part of the [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs)) pattern for the overall solution.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Order Query](#order-query)\n- [Containers](#containers)\n- [Voyage](#voyage)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Updated Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderUpdatedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"status\": \"pending\"\n  },\n  \"timestampMillis\": 1588010525896,\n  \"type\": \"OrderUpdated\",\n  \"version\": \"1\"\n}\n```\n\n### Order Spoilt Event\n\nDescription: These events denote that a container, which is carrying fresh goods from a source port to a destination port, has spoilt these fresh goods due to an anomaly detected by one or more of its IOT sensors.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Spoilt Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderSpoiltEvent.avsc)\n\nExample:\n\n```json\n{\n  \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n  \"payload\": {\n    \"containerID\": \"8919\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\"\n  },\n  \"timestamp\": 1588010710172,\n  \"type\": \"OrderSpoilt\"\n}\n```\n\n### Order Reject Event\n\nDescription: These events are produced as a result of receiving a [Container Not Found Event](#container-not-found-event) or [Voyage Not Found Event](#voyage-not-found-event) as part of the [SAGA](#saga) pattern and will trigger a compensation process for the components in that [SAGA](#saga) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Voyages](#voyages)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Order Reject Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderRejectEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"b00a3d0f-c9f9-4cbd-a6ea-36b8b455c489\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"reason\": \"A container could not be found for this order\",\n    \"status\": \"rejected\"\n  },\n  \"timestampMillis\": 1588010563056,\n  \"type\": \"OrderRejected\",\n  \"version\": \"1\"\n}\n```\n\n### Order Cancel Event\n\nDescription: These events are produced as a result of a user/administrator demanding/requesting the cancellation of a shipping order. These events will trigger the process described in the [Order Cancellation](#order-cancellation) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Voyages](#voyages)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n- [Order Cancellation](#order-cancellation)\n\nData Schema: [Order Cancel Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/orderCancelEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"containerID\": \"1392\",\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"649fa8b2-9340-423d-b08c-7fcc633b3a49\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"reason\": \"Cancel order command received\",\n    \"status\": \"cancelled\",\n    \"voyageID\": \"101\"\n  },\n  \"timestampMillis\": 1588010677588,\n  \"type\": \"OrderCancelled\",\n  \"version\": \"1\"\n}\n```\n\n### Error Event\n\nDescription: These events are produced as a result of any error that occurs in the [Order Command](#order-command) component.\n\nTopic these events are produced to/consumed from:\n\n- [Errors Topic](#errors-topic)\n\nComponents that produce these events:\n\n- [Order Command](#order-command)\n\nComponents that react to these events: None\n\nPatterns these events are relevant to: None\n\nData Schema: [Error Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/order/errorEvent.avsc)\n\nExample:\n\n```json\n{\n  \"errorMessage\" : \"Repository access issue\",\n  \"payload\": {\n    \"containerID\": \"1392\",\n    \"customerID\": \"FishFarm\",\n    \"destinationAddress\": {\n      \"city\": \"Oakland\",\n      \"country\": \"USA\",\n      \"state\": \"CA\",\n      \"street\": \"100 Main street\",\n      \"zipcode\": \"95053\"\n    },\n    \"expectedDeliveryDate\": \"2019-03-31T13:30Z\",\n    \"orderID\": \"649fa8b2-9340-423d-b08c-7fcc633b3a49\",\n    \"pickupAddress\": {\n      \"city\": \"Shanghai\",\n      \"country\": \"China\",\n      \"state\": \"NE\",\n      \"street\": \"1 a new street\",\n      \"zipcode\": \"090\"\n    },\n    \"pickupDate\": \"2019-01-25T13:30Z\",\n    \"productID\": \"Fish\",\n    \"quantity\": 100,\n    \"reason\": \"Cancel order command received\",\n    \"status\": \"cancelled\",\n    \"voyageID\": \"101\"\n  },\n  \"timestampMillis\": 1588010677588,\n  \"type\": \"Error\",\n  \"version\": \"1\"\n}\n```\n\n### Container Added Event\n\nDescription: These events would make the [Containers](#containers) component to create a new container and add it to the container inventory it manages.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Added Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAddedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"brand\": \"itgtests-brand\",\n    \"capacity\": 100,\n    \"containerID\": \"8919\",\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"status\": \"Empty\",\n    \"type\": \"Reefer\"\n  },\n  \"timestamp\": 1588010515,\n  \"type\": \"ContainerAdded\"\n}\n```\n\n### Container Assigned Event\n\nDescription: These messages denote that a container has been assigned to a shipping order as this container suited the quantity and source port of the shipping order.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Assigned Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAssignedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"containerID\": \"8919\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\"\n  },\n  \"timestamp\": 1588010526382,\n  \"type\": \"ContainerAssignedToOrder\"\n}\n```\n\n### Container Allocated Event\n\nDescription: These events denote that a container, to carry the amount of fresh goods and from the source port specified in the shipping order, has been found and allocated to a shipping order, and viceversa, as part of the [SAGA](#saga) pattern for a long running transaction. These events are emitted by the [Containers](#containers) component.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Allocated Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAllocatedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n  \"payload\": {\n    \"containerID\": \"8919\",\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\"\n  },\n  \"timestamp\": 1588010526294,\n  \"type\": \"ContainerAllocated\"\n}\n```\n\n### Container Not Found Event\n\nDescription: These events denote that a container to carry the amount of fresh goods from the source port specified in a new shipping order could not be found. As a result, the new shipping order will become rejected.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n\nData Schema: [Container Not Found Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerNotFoundEvent.avsc)\n\nExample:\n\n```json\n{\n  \"orderID\": \"b00a3d0f-c9f9-4cbd-a6ea-36b8b455c489\",\n  \"payload\": {\n    \"orderID\": \"b00a3d0f-c9f9-4cbd-a6ea-36b8b455c489\",\n    \"reason\": \"A container could not be found for this order\"\n  },\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerNotFound\"\n}\n```\n\n### Container Telemetry Event\n\nDescription: These events are produced by the [Simulator](#simulator) to simulate the container's IOT sensor telemetries that are then consumed by the [#Telemetry] component for the [Container Anomaly](#container-anomaly) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Simulator](#simulator)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n\nData Schema: [Container Telemetry Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerTelemetryEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"1111\",\n  \"payload\": \"(1111, 2020-01-15 17:59:45, P05, 5.02702153, 5., 20.52035697, 2.62176459, 0, 1, 5, 21.56977522, 75.97754859, 39.85714797, 110.74727473, True, True, True, 37.8226902168957, -122.324895, 0)\",\n  \"timestamp\": \"2020-01-15 17:59:45\",\n  \"type\": \"ReeferTelemetries\"\n}\n```\n\n### Container Anomaly Event\n\nDescription: These events denote an anomaly being predicted for a container based on the telemetry reported by the IOT sensors in the containers. These events will trigger the Business Process Manager (BPM) process whereby a field engineer will get the container assigned in order to repair it. These events are part of the [Container Anomaly](#container-anomaly), [Reactive Messaging](#reactive-messaging) and [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) patterns.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Telemetry](#telemetry)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq))\n- [Reactive Messaging](#reactive-messaging)\n\nData Schema: [Container Anomaly Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAnomalyEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"ambiant_temperature\": 19.8447,\n    \"carbon_dioxide_level\": 4.42579,\n    \"content_type\": 2,\n    \"defrost_cycle\": 6,\n    \"humidity_level\": 60.3148,\n    \"kilowatts\": 3.44686,\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"nitrogen_level\": 79.4046,\n    \"oxygen_level\": 20.4543,\n    \"target_temperature\": 6,\n    \"temperature\": 5.49647,\n    \"time_door_open\": 0.822024,\n    \"vent_1\": true,\n    \"vent_2\": true,\n    \"vent_3\": true\n  },\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerAnomaly\"\n}\n```\n\n### Container Anomaly Retry Event\n\nDescription: These events denote that the Business Process Manager (BPM) process was not called successfully and, as a result, another call attempt will be made. These events are part of the [Container Anomaly](#container-anomaly) and [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) patterns.\n\nTopic these events are produced to/consumed from:\n\n- [container Anomaly Retry Topic](#container-anomaly-retry-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq))\n\nData Schema: [Container Anomaly Retry Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAnomalyRetryEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"5982\",\n  \"payload\": {\n    \"ambiant_temperature\": 19.8447,\n    \"carbon_dioxide_level\": 4.42579,\n    \"content_type\": 2,\n    \"defrost_cycle\": 6,\n    \"humidity_level\": 60.3148,\n    \"kilowatts\": 3.44686,\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"nitrogen_level\": 79.4046,\n    \"oxygen_level\": 20.4543,\n    \"target_temperature\": 6,\n    \"temperature\": 5.49647,\n    \"time_door_open\": 0.822024,\n    \"vent_1\": true,\n    \"vent_2\": true,\n    \"vent_3\": true\n  },\n  \"retries\": 1,\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerAnomalyRetry\"\n}\n```\n\n### Container Anomaly Dead Event\n\nDescription: These events denote that the Business Process Manager (BPM) process was not called successfully either because the [Containers](#containers) component could not successfully authenticate against the Business Process Manager (BPM) or the call to the process did not succeed despite the retries. These events will keep the original container anomaly message's data and a reason for this message to happen for further analysis by system administrators. These events are part of the [Container Anomaly](#container-anomaly) and [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) patterns.\n\nTopic these events are produced to/consumed from:\n\n- [Container Anomaly Dead Topic](#container-anomaly-dead-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events: None\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly)\n- [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq))\n\nData Schema: [Container Anomaly Dead Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerAnomalyDeadEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"5982\",\n  \"payload\": {\n    \"ambiant_temperature\": 19.8447,\n    \"carbon_dioxide_level\": 4.42579,\n    \"content_type\": 2,\n    \"defrost_cycle\": 6,\n    \"humidity_level\": 60.3148,\n    \"kilowatts\": 3.44686,\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"nitrogen_level\": 79.4046,\n    \"oxygen_level\": 20.4543,\n    \"target_temperature\": 6,\n    \"temperature\": 5.49647,\n    \"time_door_open\": 0.822024,\n    \"vent_1\": true,\n    \"vent_2\": true,\n    \"vent_3\": true\n  },\n  \"reason\": \"No more BPM process retries left\",\n  \"timestamp\": 1588010563033,\n  \"type\": \"ContainerAnomalyDead\"\n}\n\n```\n\n### Container On Maintenance Event\n\nDescription: These events denote that a container has been set into maintenance mode as a result of a field engineer getting the container assigned to be repaired due to an anomaly being reported for such container. These events are a consequence of the [Container Anomaly](#container-anomaly) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Containers Topic](#containers-topic)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly) pattern.\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container On Maintenance Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerOnMaintenanceEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"brand\": \"itgtests-brand\",\n    \"capacity\": 100,\n    \"containerID\": \"8919\",\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"status\": \"Empty\",\n    \"type\": \"Reefer\"\n  },\n  \"timestamp\": 1588010716374,\n  \"type\": \"ContainerOnMaintenance\"\n}\n```\n\n### Container Off Maintenance Event\n\nDescription: These events denote that a container has been set out of maintenance mode as a result of a field engineer having repaired the container as a result of a container anomaly reported. These events are a consequence of the [Container Anomaly](#container-anomaly) pattern.\n\nTopic these events are produced to/consumed from:\n\n- [Containers](#containers)\n\nComponents that produce these events:\n\n- [Containers](#containers)\n\nComponents that react to these events:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [Container Anomaly](#container-anomaly) pattern.\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Container Off Maintenance Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/container/containerOffMaintenanceEvent.avsc)\n\nExample:\n\n```json\n{\n  \"containerID\": \"8919\",\n  \"payload\": {\n    \"brand\": \"itgtests-brand\",\n    \"capacity\": 100,\n    \"containerID\": \"8919\",\n    \"latitude\": 31.4,\n    \"longitude\": 121.5,\n    \"status\": \"Empty\",\n    \"type\": \"Reefer\"\n  },\n  \"timestamp\": 1588010721423,\n  \"type\": \"ContainerOffMaintenance\"\n}\n\n```\n\n### Voyage Assigned Event\n\nDescription: These events denote that a voyage has been found and assigned to a shipping order, and viceversa, as part of the [SAGA](#saga) pattern for a long running transaction which is triggered as a result of a new shipping order being created. A voyage is a unique carriage of fresh goods by a ship from a source port to a destination port on a specific date.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Voyages](#voyages)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n- [Command Query Responsibility Segregation (CQRS)](#command-query-responsibility-segregation-(cqrs))\n\nData Schema: [Voyage Assigned Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/voyage/voyageAssignedEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"orderID\": \"85eb9236-ed11-4ba5-b4ec-055cb261ae6d\",\n    \"voyageID\": \"101\"\n  },\n  \"timestamp\": 1588010536409,\n  \"type\": \"VoyageAssigned\",\n  \"version\": \"1\"\n}\n```\n\n### Voyage Not Found Event\n\nDescription: These events denote that a voyage for carrying the amount of fresh goods from the source port to the destination port on the specific date could not be found. As a result, the new shipping order will become rejected.\n\nTopic these events are produced to/consumed from:\n\n- [Order Topic](#orders-topic)\n\nComponents that produce these events:\n\n- [Voyages](#voyages)\n\nComponents that react to these events:\n\n- [Order Command](#order-command)\n\nPatterns these events are relevant to:\n\n- [SAGA](#saga)\n\nData Schema: [Voyage Not Found Event Schema](https://github.com/ibm-cloud-architecture/refarch-kc/data_schemas/ibm/eda/kc/voyage/voyageNotFoundEvent.avsc)\n\nExample:\n\n```json\n{\n  \"payload\": {\n    \"orderID\": \"564fa4ac-836a-4826-90f7-8ae50dd90790\",\n    \"reason\": \"Insufficient free capacity\"\n  },\n  \"timestamp\": 1588010613958,\n  \"type\": \"VoyageNotFound\",\n  \"version\": \"1\"\n}\n```\n\n## Topics\n\nThis section tries to list all the topics being used in the Reefer Container Shipment reference application and the events that will flow through them.\n\n### Order Commands Topic\n\nTopic name: **order-commands**\n\nDescription: The purpose for this topic is not other than to store the commands requested from users for creating, updating and cancelling orders for the [Order Command](#order-command) component to process these later by implementing the [Consume-transform-produce Loop](#consume-transform-produce-loop) pattern.\n\nComponents that produce events to this topic:\n\n- [Order Command](#order-command)\n\nComponents that consume events from this topic:\n\n- [Order Command](#order-command)\n\nMessages that flow through:\n\n- [Order Command Event](#order-command-event)\n\n### Orders Topic\n\nTopic name: **orders**\n\nDescription: This is probably the busiest topic in the overall Reefer Container Shipment reference application. This topic would be the place for any event that has to do with shipping orders. From having events from the [Order Command](#order-command) to notify other components of the solution that orders have been created, updated, cancelled and rejected to having events from other components to notify that an order has got a container allocated, a voyage assigned or event that a container has spoilt the fresh goods it is carrying due to an anomaly in the container.\n\nComponents that produce events to this topic:\n\n- [Order Command](#order-command)\n- [Order Query](#order-query)\n- [Containers](#containers)\n- [Voyages](#voyages)\n\nComponents that consume events from this topic:\n\n- [Order Command](#order-command)\n- [Containers](#containers)\n- [Voyages](#voyages)\n\nMessages that flow through:\n\n- [Order Created Event](#order-created-event)\n- [Order Updated Event](#order-updated-event)\n- [Order Spoilt Event](#order-spoilt-event)\n- [Order Reject Event](#order-reject-event)\n- [Order Cancel Event](#order-cancel-event)\n- [Container Allocated Event](#container-allocated-event)\n- [Container Not Found Event](#container-not-found-event)\n- [Voyage Assigned Event](#voyage-assigned-event)\n- [Voyage Not Found Event](#voyage-not-found-event)\n\n### Errors Topic\n\nTopic name: **errors**\n\nDescription: Messages in this topic will denote errors while processing user commands by the [Order Command](#order-command) component.\n\nComponents that produce events to this topic:\n\n- [Order Command](#order-command)\n\nComponents that consume events from this topic: None\n\nMessages that flow through:\n\n- [Error Event](#error-event)\n\n### Containers Topic\n\nTopic name: **containers**\n\nDescription: This is the second busiest topic of the overall Reefer Container Shipment reference application since it will be used for creating containers, receiving container anomalies, setting containers to maintenance, etc.\n\nComponents that produce events to this topic:\n\n- [Containers](#containers)\n- [Telemetry](#telemetry)\n\nComponents that consume events from this topic:\n\n- [Containers](#containers)\n- [Order Query](#order-query)\n\nMessages that flow through:\n\n- [Container Added Event](#container-added-event)\n- [Container Assigned Event](#container-assigned-event)\n- [Container Anomaly Event](#container-anomaly-event)\n- [Container On Maintenance Event](#container-on-maintenance-event)\n- [Container Off Maintenance Event](#container-off-maintenance-event)\n\n### Container Anomaly Retry Topic\n\nTopic name: **container-anomaly-retry**\n\nDescription: This topic will only contain [Container Anomaly Retry Events](#container-anomaly-retry-event) as part of the [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) pattern implementation.\n\nComponents that produce events to this topic:\n\n- [Containers](#containers)\n\nComponents that consume events from this topic:\n\n- [Containers](#containers)\n\nMessages that flow through:\n\n- [Container Anomaly Retry Event](#container-anomaly-retry-event)\n\n### Container Anomaly Dead Topic\n\nTopic name: **container-anomaly-dead**\n\nDescription: This topic will only contain [Container Anomaly Dead Events](#container-anomaly-dead-event) as part of the [Dead Letter Queue (DLQ)](#dead-letter-queue-(dlq)) pattern implementation.\n\nComponents that produce events to this topic:\n\n- [Containers](#containers)\n\nComponents that consume events from this topic:\n\n- [Containers](#containers)\n\nMessages that flow through:\n\n- [Container Anomaly Dead Event](#container-anomaly-dead-event)\n\n### Reefer Telemetry Topic\n\nTopic name: **reefer-telemetry**\n\nDescription: This topic will only hold [Container Telemetry Events](#container-telemetry-event) as part of the [Container Anomaly](#container-anomaly) and [Reactive Messaging](#reactive-messaging) patterns. These events are simply the sensor telemetries reported back from the containers.\n\nComponents that produce events to this topic:\n\n- [Simulator](#simulator)\n\nComponents that consume events from this topic:\n\n- [Telemetry](#telemetry)\n\nMessages that flow through:\n\n- [Container Telemetry Event](#container-telemetry-event)\n\n## EDA patterns\n\n### Command Query Responsibility Segregation (CQRS)\n\nRefactor a domain model to separate operations for querying data and operations for updating data so that they may be handled independently.\n\nThe CQRS pattern strictly segregates operations that read data from operations that update data. An operation can read data (the R in CRUD) or can write data (the CUD in CRUD), but not both.\n\nYou can read more about the Command Query Responsibility Segregation (CQRS) [here](https://ibm-cloud-architecture.github.io/refarch-eda/design-patterns/cqrs/)\n\n### Consume-transform-produce Loop\n\nThis pattern has been used along with the [Event Sourcing pattern](https://ibm-cloud-architecture.github.io/refarch-eda/design-patterns/event-sourcing/) and [the commands concept](https://www.enterpriseintegrationpatterns.com/patterns/messaging/CommandMessage.html) in Event Driven Architectures to ensure that any request (command) from users is eventually attended and processed by our system.\n\nThe most critical part is the processing of those commands published in the [Order Commands Topic](#order-commands-topic) of our event backbone that correspond to customer requests. We want to be able to successfully process all of them regardless of how many actions these entail, making sure these actions are all executed and we get confirmation of those. We want to process these actions in a transaction-like manner so that a request is not successfully marked as processed unless all actions were successfully executed.\n\nThe key of this loop is that the produced event to the [Orders Topic](#orders-topic) as the last action of the request (so that all previous actions have successfully been executed already) will be produced along with the offset commitment for the command read as a transaction. That is, either both the event to the [Orders Topic](#orders-topic) is produced and the offset for the command read from the [Order Commands Topic](#order-commands-topic) is committed or none of them happen.\n\nYou can read more about this pattern [here](https://ibm-cloud-architecture.github.io/refarch-kc/orders/order/)\n\n### SAGA\n\nThe Saga pattern help to support a long running transaction that can be broken up to a collection of sub transactions that can be interleaved any way with other transactions. With microservice each transaction updates data within a single service, each subsequent steps may be triggered by previous completion.\n\nYou can read more about the SAGA pattern [here](https://ibm-cloud-architecture.github.io/refarch-eda/design-patterns/saga) and have a closer look at how we have implemented it in our Reefer Container Shipment solution [here](https://ibm-cloud-architecture.github.io/refarch-kc/saga/saga)\n\n### Order Cancellation\n\nThis isn't as much of a pattern as it is of a use case. This use case consist of giving the ability to the Reefer Container Shipment administrator/operator or a customer of its services to cancel an order. However, because the creation of an order is part of a SAGA pattern where for getting an order ready for delivery other several components of your overall solution need to work together, the cancellation of such order requires a **compensation process** which is more of a piece of the SAGA pattern and thus the special mentioning in this documentation.\n\nYou can read more about the end-to-end cancellation process with the compensation process [here](https://ibm-cloud-architecture.github.io/refarch-kc/cancellation/cancellation)\n\n### Container Anomaly\n\nAgain, the Container Anomaly is more of a use case than a pattern itself. We have implemented a Container Anomaly use case whereby our [Reefer containers will send telemetry health status](#simulator), in terms of temperature, CO2 level, power level, etc, to a [Reefer Telemetry Agent](#telemetry), that we have built using the Reactive Messaging feature from the MicroProfile 3.0 specification onwards, through a [Reefer Telemetry Topic](#reefer-telemetry-topic). This [Reefer Telemetry Agent](#telemetry) will, in turn, call an Anomaly Detection Scoring service we have built following our Data and AI Reference Architecture that will determine whether there is an anomaly in a given containers based on the data sent by their IoT sensors. If an anomaly is predicted, a [Container Anomaly Event](#container-anomaly-event) will get dropped into the [Containers Topic](#containers-topic) the [container management component](#containers) of our Reefer Container Reference Application listens to. The [container management component](#containers) will call an IBM Business Process Management (BPM) process which will end up with a field engineer fixing the container.\n\nYou can read more about the implementation of this use case [here](https://ibm-cloud-architecture.github.io/refarch-kc/containerAnomaly/containerAnomaly/)\n\n### Dead Letter Queue (DLQ)\n\nIn distributed systems, it is common to find mechanisms for retrying calls to other, potentially external, services and fail gracefully if that service is unavailable for any reason.\n\nYou can read more about using non-blocking request reprocessing and dead letter queues (DLQ) to achieve decoupled, observable error-handling without disrupting real-time traffic in the context of the [Container Anomaly Use Case](#container-anomaly) of our Reefer Container Reference Application [here](https://ibm-cloud-architecture.github.io/refarch-kc/dlq/dlq)\n\n### Reactive Messaging\n\nReactive Systems provide an architecture style to deliver responsive systems. By infusing asynchronous messaging passing at the core of the system, applications enforcing the reactive system’s characteristics are inherently resilient and become more elastic by scaling up and down the number of message consumers. Microservices as part of reactive systems interact using messages. The MicroProfile Reactive Messaging specification aims to deliver applications embracing the characteristics of reactive systems.\n\nYou can read more about how we have implemented the [Telemetry](#telemetry) component as a reactive system by using the MicroProfile Reactive Messaging feature [here](https://ibm-cloud-architecture.github.io/refarch-reefer-ml/infuse/dev-scoring/)\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/inventory/inventory.mdx"}}}}