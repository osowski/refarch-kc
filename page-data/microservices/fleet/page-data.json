{"componentChunkName":"component---src-pages-microservices-fleet-index-mdx","path":"/microservices/fleet/","result":{"pageContext":{"frontmatter":{"title":"Shipping Fleet Management","description":"Deployment of application microservices"},"relativePagePath":"/microservices/fleet/index.mdx","titleType":"append","MdxNode":{"id":"7cecfe92-7e10-5813-aa09-cfd18193085b","children":[],"parent":"7461cb41-cc7e-5f7e-8653-6199cf45922b","internal":{"content":"---\ntitle: Shipping Fleet Management\ndescription: Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n<PageDescription>\nThis microservice is responsible to support simulation of fleet of container carrier vessels. It used for demonstration purpose, but it is still using an event-driven microservice implementation approach. It supports the event, actors, and commands discovered during the event storming workshop and illustrated by the following figure for the \"ship actor\".\n</PageDescription>\n\nThe source repository can be found at https://github.com/ibm-cloud-architecture/refarch-kc-ms/tree/master/fleet-ms.\n\nThe service exposes simple REST API to support getting ships and fleets information, and start and stop simulator to emulate ship movements and container metrics events generation. When a ship leaves or enters it will also generate the events as listed in the analysis.\n\n## What you will learn\n\n* Using JAXRS API to define REST resources\n* Using microprofile for API documentation\n* How to leverage WebSphere Liberty in container to support simple JEE and microprofile services\n* Kafka producer code example\n* Test Driven Development with JAXRS and Integration test with Kafka\n\nWe recommend also reading the [producer design and coding considerations article](https://github.com/ibm-cloud-architecture/refarch-eda/blob/master/docs/kafka/producers.md)\n\n## Pre-Requisites\n\n* [Maven](https://maven.apache.org/install.html) used to compile and package the application.\n* Java 8: Any compliant JVM should work.\n  * [Java 8 JDK from Oracle](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n  * [Java 8 JDK from IBM (AIX, Linux, z/OS, IBM i)](http://www.ibm.com/developerworks/java/jdk/),\n    or [Download a Liberty server package](https://developer.ibm.com/assets/wasdev/#filter/assetTypeFilters=PRODUCT)\n    that contains the IBM JDK (Windows, Linux)\n* We used [Eclipse 2018 edition](https://www.eclipse.org/downloads/) IDE for Java development.\n* Clone the parent project to get access to docker compose yml files: `git clone https://github.com/ibm-cloud-architecture/refarch-kc`. Normally you should have access to this repository from the main reference implementation repository using the `clone.sh` script.\n* Have docker engine installed on your computer.\n\n## User stories\nThis service keeps track of each of the container ships available for transporting containers. Each ship has a unique shipID. We limit the scope of a minimum viable product so the following user stories are implemented:\n\n* [x] The information about each ship is kept in a json file for a fleet. Ships are uniquely identified by their name (as shipID).\n* [x] The capacity of a ship is represented by a matrix, number of rows x number of columns to make it simpler. Therefore the total number of container is rows*columns.\n* [x] Support GPS lat/log position reports, as ship position event, of the position of the ship a different point in time. This is modeled as csv file with one row of (lat,log) pair, a row representing a time stamp. (1h?)\n* [ ] Generate ship event when leaving source port and when entering destination port, and when docked.\n* [ ] Define query of what happen to a ship from a given time to retrace its past voyages.\n\n## Build\n\nTBD Appsody\n\n## Run\n\nTBD Appsody\n\n## Integration Tests\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-ms/fleetms/#running-integration-tests-with-kafka\n\n## Implementation Details\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-ms/fleetms/\n","type":"Mdx","contentDigest":"2f204f72cd1ced7d712b02820ba5430b","counter":326,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Shipping Fleet Management","description":"Deployment of application microservices"},"exports":{},"rawBody":"---\ntitle: Shipping Fleet Management\ndescription: Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n<PageDescription>\nThis microservice is responsible to support simulation of fleet of container carrier vessels. It used for demonstration purpose, but it is still using an event-driven microservice implementation approach. It supports the event, actors, and commands discovered during the event storming workshop and illustrated by the following figure for the \"ship actor\".\n</PageDescription>\n\nThe source repository can be found at https://github.com/ibm-cloud-architecture/refarch-kc-ms/tree/master/fleet-ms.\n\nThe service exposes simple REST API to support getting ships and fleets information, and start and stop simulator to emulate ship movements and container metrics events generation. When a ship leaves or enters it will also generate the events as listed in the analysis.\n\n## What you will learn\n\n* Using JAXRS API to define REST resources\n* Using microprofile for API documentation\n* How to leverage WebSphere Liberty in container to support simple JEE and microprofile services\n* Kafka producer code example\n* Test Driven Development with JAXRS and Integration test with Kafka\n\nWe recommend also reading the [producer design and coding considerations article](https://github.com/ibm-cloud-architecture/refarch-eda/blob/master/docs/kafka/producers.md)\n\n## Pre-Requisites\n\n* [Maven](https://maven.apache.org/install.html) used to compile and package the application.\n* Java 8: Any compliant JVM should work.\n  * [Java 8 JDK from Oracle](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n  * [Java 8 JDK from IBM (AIX, Linux, z/OS, IBM i)](http://www.ibm.com/developerworks/java/jdk/),\n    or [Download a Liberty server package](https://developer.ibm.com/assets/wasdev/#filter/assetTypeFilters=PRODUCT)\n    that contains the IBM JDK (Windows, Linux)\n* We used [Eclipse 2018 edition](https://www.eclipse.org/downloads/) IDE for Java development.\n* Clone the parent project to get access to docker compose yml files: `git clone https://github.com/ibm-cloud-architecture/refarch-kc`. Normally you should have access to this repository from the main reference implementation repository using the `clone.sh` script.\n* Have docker engine installed on your computer.\n\n## User stories\nThis service keeps track of each of the container ships available for transporting containers. Each ship has a unique shipID. We limit the scope of a minimum viable product so the following user stories are implemented:\n\n* [x] The information about each ship is kept in a json file for a fleet. Ships are uniquely identified by their name (as shipID).\n* [x] The capacity of a ship is represented by a matrix, number of rows x number of columns to make it simpler. Therefore the total number of container is rows*columns.\n* [x] Support GPS lat/log position reports, as ship position event, of the position of the ship a different point in time. This is modeled as csv file with one row of (lat,log) pair, a row representing a time stamp. (1h?)\n* [ ] Generate ship event when leaving source port and when entering destination port, and when docked.\n* [ ] Define query of what happen to a ship from a given time to retrace its past voyages.\n\n## Build\n\nTBD Appsody\n\n## Run\n\nTBD Appsody\n\n## Integration Tests\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-ms/fleetms/#running-integration-tests-with-kafka\n\n## Implementation Details\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-ms/fleetms/\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/microservices/fleet/index.mdx"}}}}