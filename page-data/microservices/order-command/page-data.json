{"componentChunkName":"component---src-pages-microservices-order-command-index-mdx","path":"/microservices/order-command/","result":{"pageContext":{"frontmatter":{"title":"Order Management - Command","description":"Deployment of application microservices"},"relativePagePath":"/microservices/order-command/index.mdx","titleType":"append","MdxNode":{"id":"09db998e-edf8-55db-b302-186b6f8b020d","children":[],"parent":"ef82e1ed-6e22-532e-b0f0-4cb4c6ca1146","internal":{"content":"---\ntitle: Order Management - Command\ndescription: Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n<PageDescription>\nThis project is demonstrating, one of the possible implementation of the Command Query Responsibility Segregation and event sourcing patterns applied to Reefer shipment order subdomain. It is part of the Event Driven Architecture solution implementation. From a use case point of view, it implements the order management component, responsible to manage the full life cycle of a shipping order issued by a customer who wants to ship fresh goods overseas. The business process is defined here and the event storming analysis in this note. We are also presenting one way of applying Domain Drive Design practice for this subdomain.\n</PageDescription>\n\nThe source repository can be found at https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/tree/master/order-command-ms.\n\n### What you will learn\n\nBy studying this repository, you will be able to learn the following subjects:\n\n* How to apply domain driven design for a CQRS microservice\n* How to adopt CQRS pattern for the shipping order management\n* How to apply ubiquituous language in the code\n* Develop and deploy a microprofile 2.2 application, using open Liberty, on openshift or kubernetes\n\n### Requirements\n\nThe key business requirements we need to support are:\n\n* Be able to book a fresh product shipment order, including the allocation of the voyage and the assignment of a reefer container to the expected cargo.\n* Be able to understand what happen to the order over time:\n    * How frequently does an order get cancelled after it is placed but before an empty container is delivered to pick up location or loaded ?\n    * Track key issue or step in the reefer shipment process\n    * How often does an order get cancelled after the order is confirmed, a container assigned and goods loaded into it?\n* Be able to support adhoc query on the order that span across subdomains of the shipment domain.\n    * What are all events for a particular order and associated container shipment?\n    * Has the cold chain been protected on this particular order?\n    * How long it takes to deliver a fresh food order from california to China?\n\nThose requirements force use to consider event sourcing (understanding facts about the order over time) and CQRS patterns to separate queries from command so our architecture will be more flexible and may address different scaling requirements.\n\n## Build\n\nTBD Appsody\n\n## Run\n\nTBD Appsody\n\n## Integration Tests\n\nTBD\n\n## Implementation Details\n\nTBD Merge the following:\n- https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/docs/implementation-considerations.md\n- https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/docs/ddd-applied.md\n","type":"Mdx","contentDigest":"7fa16d382fe2def2d1b7db2f152fad4c","counter":310,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Order Management - Command","description":"Deployment of application microservices"},"exports":{},"rawBody":"---\ntitle: Order Management - Command\ndescription: Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n<PageDescription>\nThis project is demonstrating, one of the possible implementation of the Command Query Responsibility Segregation and event sourcing patterns applied to Reefer shipment order subdomain. It is part of the Event Driven Architecture solution implementation. From a use case point of view, it implements the order management component, responsible to manage the full life cycle of a shipping order issued by a customer who wants to ship fresh goods overseas. The business process is defined here and the event storming analysis in this note. We are also presenting one way of applying Domain Drive Design practice for this subdomain.\n</PageDescription>\n\nThe source repository can be found at https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/tree/master/order-command-ms.\n\n### What you will learn\n\nBy studying this repository, you will be able to learn the following subjects:\n\n* How to apply domain driven design for a CQRS microservice\n* How to adopt CQRS pattern for the shipping order management\n* How to apply ubiquituous language in the code\n* Develop and deploy a microprofile 2.2 application, using open Liberty, on openshift or kubernetes\n\n### Requirements\n\nThe key business requirements we need to support are:\n\n* Be able to book a fresh product shipment order, including the allocation of the voyage and the assignment of a reefer container to the expected cargo.\n* Be able to understand what happen to the order over time:\n    * How frequently does an order get cancelled after it is placed but before an empty container is delivered to pick up location or loaded ?\n    * Track key issue or step in the reefer shipment process\n    * How often does an order get cancelled after the order is confirmed, a container assigned and goods loaded into it?\n* Be able to support adhoc query on the order that span across subdomains of the shipment domain.\n    * What are all events for a particular order and associated container shipment?\n    * Has the cold chain been protected on this particular order?\n    * How long it takes to deliver a fresh food order from california to China?\n\nThose requirements force use to consider event sourcing (understanding facts about the order over time) and CQRS patterns to separate queries from command so our architecture will be more flexible and may address different scaling requirements.\n\n## Build\n\nTBD Appsody\n\n## Run\n\nTBD Appsody\n\n## Integration Tests\n\nTBD\n\n## Implementation Details\n\nTBD Merge the following:\n- https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/docs/implementation-considerations.md\n- https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/docs/ddd-applied.md\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/microservices/order-command/index.mdx"}}}}