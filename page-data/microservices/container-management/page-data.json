{"componentChunkName":"component---src-pages-microservices-container-management-index-mdx","path":"/microservices/container-management/","result":{"pageContext":{"frontmatter":{"title":"Shipping Container Management","description":"Deployment of application microservices"},"relativePagePath":"/microservices/container-management/index.mdx","titleType":"append","MdxNode":{"id":"9496eb4e-f065-56b5-9076-cde612b5e9b6","children":[],"parent":"7cbe244d-f93f-5cac-a87e-654de7d8e451","internal":{"content":"---\ntitle: Shipping Container Management\ndescription: Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n<PageDescription>\nThis project is part of the container shipment implementation solution, and address the Reefer container management microservice implmentaiton. You can read more about the end to end solution [in this chapter.](https://ibm-cloud-architecture.github.io/refarch-kc/)\n</PageDescription>\n\nThe source repository can be found at https://github.com/ibm-cloud-architecture/refarch-kc-container-ms.\n\nThe goal of this Container management service is to support the reefer containers inventory management and to process all the events related to the container entity.\n\nWe are demonstrating in this project how to transform an event storming analysis to an event-driven microservice implementation and how to address ['reversibility'](https://www.ibm.com/cloud/garage/practices/run/reversibility-in-the-cloud) between the different platform. The service is packaged via dockerfile, and helm release is defined to deploy to kubernetes.\n\nIn distributed systems, it is common to find mechanisms for retrying calls to other, potentially external, services and fail gracefully if that service is unavailable for any reason.\n\nYou can read more about using non-blocking request reprocessing and dead letter queues (DLQ) to achieve decoupled, observable error-handling without disrupting real-time traffic in the context of the [Container Anomaly Use Case](#container-anomaly) of our Reefer Container Reference Application [here](https://ibm-cloud-architecture.github.io/refarch-kc/dlq/dlq)\n\n\n## Build\n\nTBD Appsody\n\n## Run\n\nTBD Appsody\n\n## Integration Tests\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-container-ms/springboot/#the-integration-tests with what is up to date.\n\n## Implementation Details\n\nTBD Merge:\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/springboot/README.md\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/index.md\n","type":"Mdx","contentDigest":"db19f16c76813a033f0016b444d824e3","counter":306,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Shipping Container Management","description":"Deployment of application microservices"},"exports":{},"rawBody":"---\ntitle: Shipping Container Management\ndescription: Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n<PageDescription>\nThis project is part of the container shipment implementation solution, and address the Reefer container management microservice implmentaiton. You can read more about the end to end solution [in this chapter.](https://ibm-cloud-architecture.github.io/refarch-kc/)\n</PageDescription>\n\nThe source repository can be found at https://github.com/ibm-cloud-architecture/refarch-kc-container-ms.\n\nThe goal of this Container management service is to support the reefer containers inventory management and to process all the events related to the container entity.\n\nWe are demonstrating in this project how to transform an event storming analysis to an event-driven microservice implementation and how to address ['reversibility'](https://www.ibm.com/cloud/garage/practices/run/reversibility-in-the-cloud) between the different platform. The service is packaged via dockerfile, and helm release is defined to deploy to kubernetes.\n\nIn distributed systems, it is common to find mechanisms for retrying calls to other, potentially external, services and fail gracefully if that service is unavailable for any reason.\n\nYou can read more about using non-blocking request reprocessing and dead letter queues (DLQ) to achieve decoupled, observable error-handling without disrupting real-time traffic in the context of the [Container Anomaly Use Case](#container-anomaly) of our Reefer Container Reference Application [here](https://ibm-cloud-architecture.github.io/refarch-kc/dlq/dlq)\n\n\n## Build\n\nTBD Appsody\n\n## Run\n\nTBD Appsody\n\n## Integration Tests\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-container-ms/springboot/#the-integration-tests with what is up to date.\n\n## Implementation Details\n\nTBD Merge:\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/springboot/README.md\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/index.md\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/microservices/container-management/index.mdx"}}}}