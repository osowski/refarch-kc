{"componentChunkName":"component---src-pages-microservices-container-management-index-mdx","path":"/microservices/container-management/","result":{"pageContext":{"frontmatter":{"title":"Shipping Container Management","description":"TBD Deployment of application microservices"},"relativePagePath":"/microservices/container-management/index.mdx","titleType":"append","MdxNode":{"id":"9496eb4e-f065-56b5-9076-cde612b5e9b6","children":[],"parent":"7cbe244d-f93f-5cac-a87e-654de7d8e451","internal":{"content":"---\ntitle: Shipping Container Management\ndescription: TBD Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<PageDescription>\nThis microservice manages the container inventory. That is, this microservice will be in charge of keeping an inventory of all the containers registered in the system along with their status, size and location. When a new order is created and received, the container microservice will be in charge of assigning a container to this new shipping order based if a container is available that suits the order's quantity and source port. Otherwise, will emit a ContainerNotFound event for the interested parties in the overall Reefer Container Shipment solution.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n\n**Description:** This microservice manages the container inventory. That is, this microservice will be in charge of keeping an inventory of all the containers registered in the system along with their status, size and location. When a new order is created and received, the container microservice will be in charge of assigning a container to this new shipping order based if a container is available that suits the order's quantity and source port. Otherwise, will emit a ContainerNotFound event for the interested parties in the overall Reefer Container Shipment solution.\n\nThis microservice will also manage any container anomaly during the shipping of goods. That is, this microservice will monitoring ContainerAnomaly Events received for any particular container and in the case that these are received, it will mark the container for maintenance, send a OrderSpoilt Event so that any other microservice in the overall solution is aware that the fresh goods this container was carrying are now spoilt and will call a Business Process Manager (BPM) process in to automatically trigger the assignment of a field engineer to repair the container when it reaches the destination port.\n\nThis microservice is implemented with Spring Framework and runs on Tomcat.\n\n![Container Management diagram](images/microservice-overview-container-management.png)\n\n**Github repository:** [refarch-kc-container-ms](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms)\n\n**Kafka topics consumed from:**\n\n- [Order Topic](/microservices/topic-details/#orders-topic)\n- [Containers Topic](/microservices/topic-details/#containers-topic)\n- [Container Anomaly Retry Topic](/microservices/topic-details/#container-anomaly-retry-topic)\n\n**Kafka topics produced to:**\n\n- [Order Topic](/microservices/topic-details/#orders-topic)\n- [Containers Topic](/microservices/topic-details/#containers-topic)\n- [Container Anomaly Retry Topic](/microservices/topic-details/#container-anomaly-retry-topic)\n- [Container Anomaly Dead Topic](/microservices/topic-details/#container-anomaly-dead-topic)\n\n**Events reacted to:**\n\n- [Order Created Event](/microservices/event-details/#order-created-event)\n- [Order Reject Event](/microservices/event-details/#order-reject-event)\n- [Order Cancel Event](/microservices/event-details/#order-cancel-event)\n- [Container Added Event](/microservices/event-details/#container-added-event)\n- [Container Anomaly Event](/microservices/event-details/#container-anomaly-event)\n- [Container Anomaly Retry Event](/microservices/event-details/#container-anomaly-retry-event)\n- [Container On Maintenance Event](/microservices/event-details/#container-on-maintenance-event)\n- [Container Off Maintenance Event](/microservices/event-details/#container-off-maintenance-event)\n\n**Events produced:**\n\n- [Order Spoilt Event](/microservices/event-details/#order-spoilt-event)\n- [Container Allocated Event](/microservices/event-details/#container-allocated-event)\n- [Container Not Found Event](/microservices/event-details/#container-not-found-event)\n- [Container Assigned Event](/microservices/event-details/#container-assigned-event)\n- [Container Anomaly Retry Event](/microservices/event-details/#container-anomaly-retry-event)\n- [Container Anomaly Dead Event](/microservices/event-details/#container-anomaly-dead-event)\n- [Container On Maintenance Event](/microservices/event-details/#container-on-maintenance-event)\n- [Container Off Maintenance Event](/microservices/event-details/#container-off-maintenance-event)\n\n**EDA Patterns implemented:**\n\n- [SAGA](/implementation/saga-patterns/)\n- [Dead Letter Queue (DLQ)](/implementation/dead-letter-queue/)\n- [Anomalous Container Tracking](https://ibm-cloud-architecture.github.io/refarch-kc/implementation/container-anomaly/)\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Appsody Stack it is based on and then performing the local application build inside the containerized environment:\n\n`appsody build -t <yournamespace>/kcontainer-spring-container-ms[:tag] [--push]`\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\n## Run\n\n### Deployment parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification.                                   |\n| KCSOLUTION_CONTAINERS_TOPIC              | YES      | The topic name used for communication relating to the containers entity.                                                                                                                       |\n| KCSOLUTION_ORDERS_TOPIC                  | YES      | The topic name used for communication relating to the orders entity.                                                                                                                       |\n| KCSOLUTION_CONTAINER_ANOMALY_RETRY_TOPIC | YES      | The topic name used for communication relating to the container anomaly retry actions.                                                                                                                       |\n| KCSOLUTION_CONTAINER_ANOMALY_DEAD_TOPIC  | YES      | The topic name used for communication relating to the container anomaly dead letter actions.                                                                                                                      |\n| POSTGRESQL_URL                           | YES      | The URL of the PostgreSQL database instance in the form of `jdbc:postgresql://<hostname>:<port>/<database-name>?sslmode=verify-full&sslfactory=org.postgresql.ssl.NonValidatingFactory`.   |\n| POSTGRESQL_USER                          | YES      | The username of the PostgreSQL database instance.                                                                                                                       |\n| POSTGRESQL_PWD                           | YES      | The password of the PostgreSQL database instance.                                                                                                                       |\n| POSTGRESQL_CA_PEM                        | NO       | Required when connecting to PostgreSQL instances that require SSL-based server verification. See [**Volume Mounts**](#volume-mounts) below.  |\n| ANOMALY_THRESHOLD                        | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY                              | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY_LOGIN                        | NO       | TBD                                                                                                                       |\n| BPM_EXPIRATION                           | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY_USER                         | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY_PASSWORD                     | NO       | TBD                                                                                                                       |\n\n### Volume Mounts\n\nTBD\n\n### Running the microservice locally\n\nTBD Appsody\n\nTBD Cover including `-v mount of ssl truststore`\n\n### Running the microservice remotely\n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster.\n\nTo deploy the microservice to a remote cluster:\n\n`appsody deploy <yournamespace>/kcontainer-spring-container-ms[:tag] --no-build`\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Integration Tests\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-container-ms/springboot/#the-integration-tests with what is up to date.\n\n## Implementation Details\n\nTBD Merge:\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/index.md\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/springboot/README.md\n\nThe goal of this Container management service is to support the reefer containers inventory management and to process all the events related to the container entity.\n\nWe are demonstrating in this project how to transform an event storming analysis to an event-driven microservice implementation and how to address ['reversibility'](https://www.ibm.com/cloud/garage/practices/run/reversibility-in-the-cloud) between the different platform. The service is packaged via dockerfile, and helm release is defined to deploy to kubernetes.\n\nIn distributed systems, it is common to find mechanisms for retrying calls to other, potentially external, services and fail gracefully if that service is unavailable for any reason.\n\nYou can read more about using non-blocking request reprocessing and dead letter queues (DLQ) to achieve decoupled, observable error-handling without disrupting real-time traffic in the context of the [Container Anomaly Use Case](#container-anomaly) of our Reefer Container Reference Application [here](https://ibm-cloud-architecture.github.io/refarch-kc/dlq/dlq)\n","type":"Mdx","contentDigest":"bb254f41c93b72b57a6ebfe2bd97ff57","counter":339,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Shipping Container Management","description":"TBD Deployment of application microservices"},"exports":{},"rawBody":"---\ntitle: Shipping Container Management\ndescription: TBD Deployment of application microservices\n---\n\n<InlineNotification kind=\"warning\">UNDER CONSTRUCTION</InlineNotification>\n\n<PageDescription>\nThis microservice manages the container inventory. That is, this microservice will be in charge of keeping an inventory of all the containers registered in the system along with their status, size and location. When a new order is created and received, the container microservice will be in charge of assigning a container to this new shipping order based if a container is available that suits the order's quantity and source port. Otherwise, will emit a ContainerNotFound event for the interested parties in the overall Reefer Container Shipment solution.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Integration Tests</AnchorLink>\n  <AnchorLink>Implementation Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n\n**Description:** This microservice manages the container inventory. That is, this microservice will be in charge of keeping an inventory of all the containers registered in the system along with their status, size and location. When a new order is created and received, the container microservice will be in charge of assigning a container to this new shipping order based if a container is available that suits the order's quantity and source port. Otherwise, will emit a ContainerNotFound event for the interested parties in the overall Reefer Container Shipment solution.\n\nThis microservice will also manage any container anomaly during the shipping of goods. That is, this microservice will monitoring ContainerAnomaly Events received for any particular container and in the case that these are received, it will mark the container for maintenance, send a OrderSpoilt Event so that any other microservice in the overall solution is aware that the fresh goods this container was carrying are now spoilt and will call a Business Process Manager (BPM) process in to automatically trigger the assignment of a field engineer to repair the container when it reaches the destination port.\n\nThis microservice is implemented with Spring Framework and runs on Tomcat.\n\n![Container Management diagram](images/microservice-overview-container-management.png)\n\n**Github repository:** [refarch-kc-container-ms](https://github.com/ibm-cloud-architecture/refarch-kc-container-ms)\n\n**Kafka topics consumed from:**\n\n- [Order Topic](/microservices/topic-details/#orders-topic)\n- [Containers Topic](/microservices/topic-details/#containers-topic)\n- [Container Anomaly Retry Topic](/microservices/topic-details/#container-anomaly-retry-topic)\n\n**Kafka topics produced to:**\n\n- [Order Topic](/microservices/topic-details/#orders-topic)\n- [Containers Topic](/microservices/topic-details/#containers-topic)\n- [Container Anomaly Retry Topic](/microservices/topic-details/#container-anomaly-retry-topic)\n- [Container Anomaly Dead Topic](/microservices/topic-details/#container-anomaly-dead-topic)\n\n**Events reacted to:**\n\n- [Order Created Event](/microservices/event-details/#order-created-event)\n- [Order Reject Event](/microservices/event-details/#order-reject-event)\n- [Order Cancel Event](/microservices/event-details/#order-cancel-event)\n- [Container Added Event](/microservices/event-details/#container-added-event)\n- [Container Anomaly Event](/microservices/event-details/#container-anomaly-event)\n- [Container Anomaly Retry Event](/microservices/event-details/#container-anomaly-retry-event)\n- [Container On Maintenance Event](/microservices/event-details/#container-on-maintenance-event)\n- [Container Off Maintenance Event](/microservices/event-details/#container-off-maintenance-event)\n\n**Events produced:**\n\n- [Order Spoilt Event](/microservices/event-details/#order-spoilt-event)\n- [Container Allocated Event](/microservices/event-details/#container-allocated-event)\n- [Container Not Found Event](/microservices/event-details/#container-not-found-event)\n- [Container Assigned Event](/microservices/event-details/#container-assigned-event)\n- [Container Anomaly Retry Event](/microservices/event-details/#container-anomaly-retry-event)\n- [Container Anomaly Dead Event](/microservices/event-details/#container-anomaly-dead-event)\n- [Container On Maintenance Event](/microservices/event-details/#container-on-maintenance-event)\n- [Container Off Maintenance Event](/microservices/event-details/#container-off-maintenance-event)\n\n**EDA Patterns implemented:**\n\n- [SAGA](/implementation/saga-patterns/)\n- [Dead Letter Queue (DLQ)](/implementation/dead-letter-queue/)\n- [Anomalous Container Tracking](https://ibm-cloud-architecture.github.io/refarch-kc/implementation/container-anomaly/)\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Appsody Stack it is based on and then performing the local application build inside the containerized environment:\n\n`appsody build -t <yournamespace>/kcontainer-spring-container-ms[:tag] [--push]`\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\n## Run\n\n### Deployment parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification.                                   |\n| KCSOLUTION_CONTAINERS_TOPIC              | YES      | The topic name used for communication relating to the containers entity.                                                                                                                       |\n| KCSOLUTION_ORDERS_TOPIC                  | YES      | The topic name used for communication relating to the orders entity.                                                                                                                       |\n| KCSOLUTION_CONTAINER_ANOMALY_RETRY_TOPIC | YES      | The topic name used for communication relating to the container anomaly retry actions.                                                                                                                       |\n| KCSOLUTION_CONTAINER_ANOMALY_DEAD_TOPIC  | YES      | The topic name used for communication relating to the container anomaly dead letter actions.                                                                                                                      |\n| POSTGRESQL_URL                           | YES      | The URL of the PostgreSQL database instance in the form of `jdbc:postgresql://<hostname>:<port>/<database-name>?sslmode=verify-full&sslfactory=org.postgresql.ssl.NonValidatingFactory`.   |\n| POSTGRESQL_USER                          | YES      | The username of the PostgreSQL database instance.                                                                                                                       |\n| POSTGRESQL_PWD                           | YES      | The password of the PostgreSQL database instance.                                                                                                                       |\n| POSTGRESQL_CA_PEM                        | NO       | Required when connecting to PostgreSQL instances that require SSL-based server verification. See [**Volume Mounts**](#volume-mounts) below.  |\n| ANOMALY_THRESHOLD                        | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY                              | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY_LOGIN                        | NO       | TBD                                                                                                                       |\n| BPM_EXPIRATION                           | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY_USER                         | NO       | TBD                                                                                                                       |\n| BPM_ANOMALY_PASSWORD                     | NO       | TBD                                                                                                                       |\n\n### Volume Mounts\n\nTBD\n\n### Running the microservice locally\n\nTBD Appsody\n\nTBD Cover including `-v mount of ssl truststore`\n\n### Running the microservice remotely\n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster.\n\nTo deploy the microservice to a remote cluster:\n\n`appsody deploy <yournamespace>/kcontainer-spring-container-ms[:tag] --no-build`\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Integration Tests\n\nTBD Source from https://ibm-cloud-architecture.github.io/refarch-kc-container-ms/springboot/#the-integration-tests with what is up to date.\n\n## Implementation Details\n\nTBD Merge:\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/index.md\n- https://github.com/ibm-cloud-architecture/refarch-kc-container-ms/blob/master/docs/springboot/README.md\n\nThe goal of this Container management service is to support the reefer containers inventory management and to process all the events related to the container entity.\n\nWe are demonstrating in this project how to transform an event storming analysis to an event-driven microservice implementation and how to address ['reversibility'](https://www.ibm.com/cloud/garage/practices/run/reversibility-in-the-cloud) between the different platform. The service is packaged via dockerfile, and helm release is defined to deploy to kubernetes.\n\nIn distributed systems, it is common to find mechanisms for retrying calls to other, potentially external, services and fail gracefully if that service is unavailable for any reason.\n\nYou can read more about using non-blocking request reprocessing and dead letter queues (DLQ) to achieve decoupled, observable error-handling without disrupting real-time traffic in the context of the [Container Anomaly Use Case](#container-anomaly) of our Reefer Container Reference Application [here](https://ibm-cloud-architecture.github.io/refarch-kc/dlq/dlq)\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/microservices/container-management/index.mdx"}}}}